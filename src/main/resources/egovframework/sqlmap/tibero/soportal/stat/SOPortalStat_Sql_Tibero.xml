<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="StatList" >
    <typeAlias alias="params" type="egovframework.common.base.model.Params" />
    <typeAlias alias="record" type="egovframework.common.base.model.Record" />

    <!-- 통계표 주기 쿼리 -->
    <sql id="statListDao.selectStatTblItmWrttime">
       	SELECT 
       		<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
       			<isNotEmpty property="TbViewData">	<!-- 표로 보기인경우 데이터 조회시만(데이터 조회와 표두/표측 세팅에 같이 쓰는 sql이여서 분기) -->
       				A.YEAR_CD || B.IDTFR 	AS WRTTIME_IDTFR_ID
       			</isNotEmpty>
       			<isEmpty property="TbViewData">
       				<isEqual property="SheetLoc" compareValue="H">		<!-- 헤더 정보 세팅할 경우 -->
		       		B.IDTFR 	AS WRTTIME_IDTFR_ID
	       			, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#, B.IDTFR)	AS WRTTIME_IDTFR_NM
	       			</isEqual>
       				<isEqual property="SheetLoc" compareValue="L">		<!-- 표측 정보 세팅할 경우 -->
	       			A.YEAR_CD 	AS WRTTIME_IDTFR_ID
	       			, FN_GET_WRTTIME_IDTFR_NM('YY', A.YEAR_CD)	AS WRTTIME_IDTFR_NM
	       			</isEqual>
       			</isEmpty>
       		</isEqual>
       		<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
       		A.YEAR_CD || B.IDTFR 	AS WRTTIME_IDTFR_ID
       		, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#,  A.YEAR_CD || B.IDTFR)	AS WRTTIME_IDTFR_NM
       		</isNotEqual>
       		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
       		, ROW_NUMBER() OVER(ORDER BY A.YEAR_CD || B.IDTFR DESC) AS RN
       		</isEqual>
		FROM 
		(
		<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
			SELECT 	
				LEVEL AS NO
				, TO_CHAR(#wrttimeStartYear:NUMERIC# + LEVEL - 1) AS YEAR_CD
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= #wrttimeEndYear:NUMERIC# - #wrttimeStartYear:NUMERIC# + 1
			]]>
		</isEqual>
		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
			SELECT 	
				LEVEL AS NO
				, TO_CHAR(#wrttimeMinYear:NUMERIC# + LEVEL - 1) AS YEAR_CD
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= #wrttimeMaxYear:NUMERIC# - #wrttimeMinYear:NUMERIC# + 1
			]]>			
		</isEqual>
		) A 
		CROSS JOIN 
		(
			SELECT 
				LEVEL AS NO
				, (CASE WHEN 'YY' = #dtacycleCd:VARCHAR# THEN LPAD(LEVEL-1  , 2, 0) ELSE LPAD(LEVEL , 2, 0) END) AS IDTFR
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= (CASE WHEN 'HY' = #dtacycleCd:VARCHAR# THEN 2 WHEN 'QY' = #dtacycleCd:VARCHAR# THEN 4 WHEN 'MM' = #dtacycleCd:VARCHAR# THEN 12 ELSE 0 END)
			]]>
		) B
		<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
		WHERE A.YEAR_CD || B.IDTFR BETWEEN CONCAT(#wrttimeStartYear:VARCHAR#, #wrttimeStartQt:VARCHAR#) AND CONCAT(#wrttimeEndYear:VARCHAR#, #wrttimeEndQt:VARCHAR#)
		</isEqual>
		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
		WHERE A.YEAR_CD || B.IDTFR BETWEEN CONCAT(#wrttimeMinYear:VARCHAR#, #wrttimeMinQt:VARCHAR#) AND CONCAT(#wrttimeMaxYear:VARCHAR#, #wrttimeMaxQt:VARCHAR#)
		</isEqual>
		<isNotEmpty property="STUseYn">
			<isEqual property="STUseYn" compareValue="Y">	 	<!-- 시계열 사용 할 경우 -->
					<!-- 실제 데이터가 있는것만 가져온다 -->
					AND A.YEAR_CD || B.IDTFR IN (SELECT WRTTIME_IDTFR_ID FROM TB_STTS_TBL_DIF WHERE STATBL_ID = #statblId:VARCHAR# AND DTACYCLE_CD = #dtacycleCd:VARCHAR# AND WRTSTATE_CD = 'AC')
			</isEqual>
		</isNotEmpty>
    </sql>
    
    <!-- 통계표 이력 주기 쿼리 -->
    <sql id="statListDao.selectStatHistTblItmWrttime">
       	SELECT 
       		<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
       			<isNotEmpty property="TbViewData">	<!-- 표로 보기인경우 데이터 조회시만(데이터 조회와 표두/표측 세팅에 같이 쓰는 sql이여서 분기) -->
       				A.YEAR_CD || B.IDTFR 	AS WRTTIME_IDTFR_ID
       			</isNotEmpty>
       			<isEmpty property="TbViewData">
       				<isEqual property="SheetLoc" compareValue="H">		<!-- 헤더 정보 세팅할 경우 -->		
		       		<!--  171121 김정호-표로 보기시 주기가 위로 위치되도록 수정
		       		A.YEAR_CD 	AS WRTTIME_IDTFR_ID
		       		, FN_GET_WRTTIME_IDTFR_NM('YY',  A.YEAR_CD)	AS WRTTIME_IDTFR_NM -->
		       		B.IDTFR 	AS WRTTIME_IDTFR_ID
	       			, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#, B.IDTFR)	AS WRTTIME_IDTFR_NM
	       			</isEqual>
       				<isEqual property="SheetLoc" compareValue="L">		<!-- 표측 정보 세팅할 경우 -->
	       			<!-- 171121 김정호-표로 보기시 주기가 위로 위치되도록 수정
	       			B.IDTFR 	AS WRTTIME_IDTFR_ID
	       			, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd#, B.IDTFR)	AS WRTTIME_IDTFR_NM -->
	       			A.YEAR_CD 	AS WRTTIME_IDTFR_ID
	       			, FN_GET_WRTTIME_IDTFR_NM('YY', A.YEAR_CD)	AS WRTTIME_IDTFR_NM
	       			</isEqual>
       			</isEmpty>
       		</isEqual>
       		<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
       		A.YEAR_CD || B.IDTFR 	AS WRTTIME_IDTFR_ID
       		, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#,  A.YEAR_CD || B.IDTFR)	AS WRTTIME_IDTFR_NM
       		</isNotEqual>
       		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
       		, ROW_NUMBER() OVER(ORDER BY A.YEAR_CD || B.IDTFR DESC) AS RN
       		</isEqual>
		FROM 
		(
		<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
			SELECT 	
				LEVEL AS NO
				, TO_CHAR(#wrttimeStartYear:NUMERIC# + LEVEL - 1) AS YEAR_CD
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= #wrttimeEndYear:NUMERIC# - #wrttimeStartYear:NUMERIC# + 1
			]]>
		</isEqual>
		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
			SELECT 	
				LEVEL AS NO
				, TO_CHAR(#wrttimeMinYear:NUMERIC# + LEVEL - 1) AS YEAR_CD
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= #wrttimeMaxYear:NUMERIC# - #wrttimeMinYear:NUMERIC# + 1
			]]>			
		</isEqual>
		) A 
		CROSS JOIN 
		(
			SELECT 
				LEVEL AS NO
				, (CASE WHEN 'YY' = #dtacycleCd:VARCHAR# THEN LPAD(LEVEL-1  , 2, 0) ELSE LPAD(LEVEL , 2, 0) END) AS IDTFR
			FROM   DUAL
			<![CDATA[
			CONNECT BY LEVEL <= (CASE WHEN 'HY' = #dtacycleCd:VARCHAR# THEN 2 WHEN 'QY' = #dtacycleCd:VARCHAR# THEN 4 WHEN 'MM' = #dtacycleCd:VARCHAR# THEN 12 ELSE 0 END)
			]]>
		) B
		<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
		WHERE A.YEAR_CD || B.IDTFR BETWEEN CONCAT(#wrttimeStartYear:VARCHAR#, #wrttimeStartQt:VARCHAR#) AND CONCAT(#wrttimeEndYear:VARCHAR#, #wrttimeEndQt:VARCHAR#)
		</isEqual>
		<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
		WHERE A.YEAR_CD || B.IDTFR BETWEEN CONCAT(#wrttimeMinYear:VARCHAR#, #wrttimeMinQt:VARCHAR#) AND CONCAT(#wrttimeMaxYear:VARCHAR#, #wrttimeMaxQt:VARCHAR#)
		</isEqual>
		<isNotEmpty property="STUseYn">
			<isEqual property="STUseYn" compareValue="Y">	 	<!-- 시계열 사용 할 경우 -->
					<!-- 실제 데이터가 있는것만 가져온다 -->
					AND A.YEAR_CD || B.IDTFR IN (SELECT DISTINCT WRTTIME_IDTFR_ID FROM TB_HIS_STTSDATA_CYCLE WHERE STATBL_ID = #statblId:VARCHAR# AND HIS_CYCLE_NO = #hisCycleNo:NUMERIC# AND WRTSTATE_CD = 'AC')
			</isEqual>
		</isNotEmpty>
    </sql>
    
   	<!-- 코드정보 조회 -->
    <select id="statListDao.selectOption" parameterClass="params" resultClass="record">
    	/* sql id : statListDao.selectOption */
        SELECT 
        	DITC_CD     AS "code",
        	<isEmpty property="langGb">
        	DITC_NM     AS "name"
        	</isEmpty>
        	<isNotEmpty property="langGb">
        	ENG_DITC_NM AS "name"
        	</isNotEmpty>
        FROM TB_COMM_CODE
        WHERE GRP_CD = #grpCd:VARCHAR#
        	AND USE_YN = 'Y'
		<isNotEmpty property="ditcCd">	<!-- 특정코드만 조회할 경우 -->
			<isEqual property="ditcCd" compareValue="GS">
				AND DITC_CD IN ('GA','SA')
			</isEqual>
			<isEqual property="ditcCd" compareValue="FD">
				AND DITC_CD LIKE 'FD%'
			</isEqual>
	    </isNotEmpty>
        ORDER BY V_ORDER
    </select>

	<!-- 통계표 자료시점 조회(시계열 조건 검색) -->
	<select id="statListDao.selectStatWrtTimeOption" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectStatWrtTimeOption */
		SELECT
			TO_CHAR(NVL(S_YYYY, TO_CHAR(SYSDATE, 'YYYY')) + LEVEL - 1) AS "code"
			, FN_GET_WRTTIME_IDTFR_NM('YY', TO_CHAR(NVL(S_YYYY, TO_CHAR(SYSDATE, 'YYYY')) + LEVEL - 1) || '00') AS "name"
		FROM 
			(
				SELECT 
					TO_CHAR(SUBSTR(MIN(WRTTIME_IDTFR_ID),1,4)) AS S_YYYY
					, TO_CHAR(SUBSTR(MAX(WRTTIME_IDTFR_ID),1,4)) AS E_YYYY
				FROM 
					TB_STTS_TBL_DIF A
				WHERE
					<!-- 통계표 ID 조건 간편, 복수통계 sql 같이 쓰기 위하여 괄호로 한번 감싸줬음 -->
					(
					STATBL_ID = #statblId:VARCHAR#
					<isNotEmpty property="statblIds">
		            	<iterate property="statblIds" prepend=" OR STATBL_ID IN " open="(" close=")" conjunction=", ">
		            		#statblIds[]#
		            	</iterate>
		            </isNotEmpty>		
		            )			
					AND WRTSTATE_CD = 'AC'
					AND DTACYCLE_CD = #dtacycleCd:VARCHAR#
		) 
		<![CDATA[
		CONNECT BY LEVEL <= E_YYYY - S_YYYY + 1 
		]]>	
		<isNotEmpty property="sortDirection">
			<isEqual property="sortDirection" compareValue="ASC">
				ORDER BY "code" ASC	
			</isEqual>
			<isEqual property="sortDirection" compareValue="DESC">
				ORDER BY "code" DESC
			</isEqual>
		</isNotEmpty>
	</select>

	<!-- 통계표 자료시점 조회(시계열 조건 검색)[월/분기확인] -->
	<select id="statListDao.selectStatQrtTimeOption" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectStatQrtTimeOption */
		SELECT 
			TO_CHAR(SUBSTR(MIN(WRTTIME_IDTFR_ID),5,6)) AS S_YYYY
			, TO_CHAR(SUBSTR(MAX(WRTTIME_IDTFR_ID),5,6)) AS E_YYYY
		FROM 
			TB_STTS_TBL_DIF A
		WHERE 
			STATBL_ID = #statblId:VARCHAR#
			AND WRTSTATE_CD = 'AC'
		<isNotEmpty property="dtacycleCd">
			AND DTACYCLE_CD = #dtacycleCd#
		</isNotEmpty>  
	</select>
	
	<!-- 통계표 단위 조회 -->
	<select id="statListDao.selectStatTblUi" parameterClass="params" resultClass="record">		
		SELECT L.UI_ID AS "code",UI_CVSN_VAL,
				  L.UI_NM AS "name"		  
		FROM (		  
			 SELECT 
			 		count(*) over(partition by  A.GRP_UI_ID) cnt, 
			 		A.UI_ID, A.UI_CVSN_VAL,
			 		<isEmpty property="langGb">
			        A.UI_NM	     AS UI_NM        
			        </isEmpty>
			        <isNotEmpty property="langGb">
			        A.ENG_UI_NM  AS UI_NM
			        </isNotEmpty>
			   FROM TB_STTS_STDDUI A 
			   INNER JOIN ( 
			   		SELECT DISTINCT GRP_UI_ID
			        FROM TV_STTS_TBL_ITM
			        WHERE ITM_TAG = 'I' AND USE_YN = 'Y' AND DUMMY_YN = 'N'
			        			AND STATBL_ID = #statblId:VARCHAR#
				) B ON A.GRP_UI_ID = B.GRP_UI_ID AND  A.USE_YN = 'Y' AND A.UI_CVSN_YN = 'Y'
			  ORDER BY A.GRP_UI_ID DESC,     A.V_ORDER 
		) L
		WHERE CNT <![CDATA[ > ]]> 1
	</select>

	<!-- 통계표 통계자료유형 조회 -->
	<select id="statListDao.selectStatTblDtadvs" parameterClass="params" resultClass="record">
		SELECT 
			A.STATBL_ID		AS "statblId"
			, B.OPT_CD		AS "optCd"
			<isEmpty property="langGb">
			, C.DITC_NM 	AS "optNm"
			</isEmpty>
			<isNotEmpty property="langGb">
			, C.ENG_DITC_NM AS "optNm"
			</isNotEmpty>
			, B.OPT_VAL		AS "optVal"
			, (SELECT COUNT(*) FROM TB_STTS_TBL_OPT WHERE STATBL_ID = #statblId:VARCHAR# AND OPT_CD = 'DP' AND OPT_VAL = B.OPT_VAL AND USE_YN = 'Y') AS "defaultCnt"
		FROM
			TB_STTS_TBL A
			INNER JOIN TB_STTS_TBL_OPT B
				ON  A.STATBL_ID = B.STATBL_ID
				AND B.OPT_CD = 'DD'
				AND B.USE_YN = 'Y'
			INNER JOIN TB_COMM_CODE C
				ON  C.GRP_CD = 'S1102'
				AND B.OPT_VAL = C.DITC_CD
				AND C.USE_YN = 'Y'
		WHERE 
			A.STATBL_ID = #statblId:VARCHAR#	
		ORDER BY C.V_ORDER	
	</select>
	
	<!-- 통계 기준정보 조회 -->
	<select id="statListDao.selectSTTSOption" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectSTTSOption */
		SELECT 
			DITC_CD AS "code",
        	DITC_NM AS "name"
		FROM 
			TV_STTS_CODE
		WHERE  
			GRP_CD = #grpCd:VARCHAR#
		ORDER BY V_ORDER 
	</select>
	
	<!-- 간편검색 통계표 목록 조회(통계표 검색용) -->
	<select id="statListDao.statEasyList" parameterClass="params" resultClass="record">
		/* sql id : statListDao.statEasyList(NABO) */
		WITH TMP_STTS_TBL AS
		(
			<isNotEqual property="statGb" compareValue="ORIGIN">
			SELECT 'C' AS STATBL_TAG
				 , C.CATE_ID AS STATBL_ID
				 , C.PAR_CATE_ID AS PAR_STATBL_ID
				 , C.CATE_NM AS STATBL_NM
			</isNotEqual>
			<isEqual property="statGb" compareValue="ORIGIN">
	        SELECT 'O' AS STATBL_TAG 
	        	  , C.DITC_CD AS STATBL_ID 
	        	  , 'T' AS PAR_STATBL_ID 
	              , C.DITC_NM AS STATBL_NM 
	              , 'N' AS CTS_SRV_CD
	              , C.V_ORDER AS V_ORDER
	              , NULL AS BBS_SEQ
	              , '' AS DATA_START_YY
				  , '' AS DATA_END_YY
				  , '' AS TOP_ORG_NM
				  , '' AS MAP_SRV_CD
				  , '' AS DTACYCLE_CD
	          FROM TB_COMM_CODE C
	         WHERE GRP_CD = 'C1001' 
	       	   AND USE_YN = 'Y'
       		 UNION
			SELECT 'O' AS STATBL_TAG
				 , C.ORG_CD AS STATBL_ID
				 , DECODE(C.PAR_ORG_CD, 'T', C.TYPE_CD, C.PAR_ORG_CD) AS PAR_STATBL_ID
				 , C.ORG_NM AS STATBL_NM
			</isEqual>
				 , 'N' AS CTS_SRV_CD
				 , C.V_ORDER AS V_ORDER
				 , NULL AS BBS_SEQ
				 , '' AS DATA_START_YY
				 , '' AS DATA_END_YY
				 , '' AS TOP_ORG_NM
				 , '' AS MAP_SRV_CD
				 , '' AS DTACYCLE_CD
			<isNotEqual property="statGb" compareValue="ORIGIN">
			  FROM TB_STTS_CATE C
			  WHERE C.USE_YN = 'Y'
			  UNION ALL
			</isNotEqual>
			<isEqual property="statGb" compareValue="ORIGIN">
			  FROM TB_COMM_ORG C
			  WHERE C.USE_YN = 'Y'
			  UNION
			</isEqual>
			SELECT A.STATBL_TAG 
				 , A.STATBL_ID
				 <isNotEqual property="statGb" compareValue="ORIGIN">
				 , B.CATE_ID AS PAR_STATBL_ID
				 </isNotEqual>
				 <isEqual property="statGb" compareValue="ORIGIN">
				 , B.ORG_CD AS PAR_STATBL_ID
				 </isEqual>
				 , A.STATBL_NM
				 , A.CTS_SRV_CD
				 , B.V_ORDER
				 , A.BBS_SEQ
				 , A.DATA_START_YY
				 , A.DATA_END_YY
				 , A.TOP_ORG_NM
				 , A.MAP_SRV_CD
				 , A.DTACYCLE_LIST_CD AS DTACYCLE_CD
			  FROM TV_STTS_TBLSMRY A 
			  		<isNotEqual property="statGb" compareValue="ORIGIN">
			  		INNER JOIN TB_STTS_TBL_CATE B ON A.STATBL_ID = B.STATBL_ID
			  		</isNotEqual>
				 	<isEqual property="statGb" compareValue="ORIGIN">
			  		INNER JOIN TB_STTS_TBL_USR B ON A.STATBL_ID = B.STATBL_ID AND B.USE_YN = 'Y' AND B.SRC_VIEW_YN = 'Y'
			  		</isEqual>
			 WHERE A.KOR_YN = 'Y'
			   <isNotEmpty property="searchVal">
			   AND TAG_STATBL_NM LIKE REPLACE('%' || UPPER(#searchVal#) || '%', ' ', '')
			   </isNotEmpty>
		)
		SELECT 
		<isEqual property="statGb" compareValue="NABOCIT">
			 LEVEL-1 AS "Level"
		</isEqual>
		<isNotEqual property="statGb" compareValue="NABOCIT">
			LEVEL AS "Level"
		</isNotEqual>
			 , CONNECT_BY_ISLEAF AS "leaf"
			 <!-- , DECODE(LEVEL, 1, 'true', 'false') AS "open" -->
			 , 'false' AS "open"
			 , L.STATBL_TAG AS "statblTag"
			 , L.STATBL_ID AS "statblId"
			 , L.STATBL_NM AS "statblNm"
			 <![CDATA[
			 , (
			 	CASE WHEN  L.STATBL_TAG <> 'T' AND LEVEL >= 1 
			 		 THEN (
							SELECT COUNT(*)
							  FROM TMP_STTS_TBL
							 WHERE STATBL_TAG = 'T'
							 START WITH STATBL_ID = L.STATBL_ID
							 CONNECT BY PRIOR STATBL_ID = PAR_STATBL_ID
					 )
		             ELSE NULL 
		             END
			   )  AS "statblExtNm"
			 ]]>
			 <isEqual property="statGb" compareValue="NABOCIT">
			 , DECODE(L.PAR_STATBL_ID, NVL(#treeCateId:VARCHAR#, '300000'), 'T', L.PAR_STATBL_ID)  AS "parStatblId"
			 </isEqual>
			 <isNotEqual property="statGb" compareValue="NABOCIT">
			 , L.PAR_STATBL_ID  AS "parStatblId"
			 </isNotEqual>
			 , L.V_ORDER AS "vOrder"
			 , CTS_SRV_CD AS "ctsSrvCd"
			 , BBS_SEQ AS "bbsSeq"
			 , L.TOP_ORG_NM AS "topOrgNm"
			 , SUBSTR(SYS_CONNECT_BY_PATH(STATBL_NM, '>'), 2) AS "fullPath"
			 , MAP_SRV_CD  AS "mapSrvCd"
			 , DTACYCLE_CD AS "dtacycleCd"
		  FROM TMP_STTS_TBL L
		 WHERE 1=1
		 <isEqual property="statGb" compareValue="NABOCIT">
		 			AND LEVEL > 1
		 </isEqual>
		 <isNotEmpty property="multiGb">
		   AND L.CTS_SRV_CD = 'N' 
		 </isNotEmpty>	
		   AND EXISTS (SELECT 1
	                     FROM TMP_STTS_TBL E
	                    WHERE E.STATBL_TAG = 'T'
	                    <isNotEmpty property="multiGb">
						   AND E.CTS_SRV_CD = 'N' 
						 </isNotEmpty>	
	                    START	WITH E.STATBL_ID = L.STATBL_ID
	                    CONNECT BY PRIOR E.STATBL_ID = E.PAR_STATBL_ID )
		 START WITH L.PAR_STATBL_ID = 'T' 
		 			<isEqual property="statGb" compareValue="SUBJ">
		 			AND L.STATBL_TAG = 'C'
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="NAME">
		 			AND L.STATBL_TAG = 'C'
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="NABOCIT">
		 			AND L.STATBL_ID = NVL(#treeCateId:VARCHAR#, '300000')
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="ORIGIN">
		 			AND L.STATBL_TAG = 'O'
		 			</isEqual>
	  	 CONNECT BY PRIOR L.STATBL_ID = L.PAR_STATBL_ID
		  ORDER SIBLINGS BY L.V_ORDER, L.STATBL_NM
	</select>

	<!-- 통계표 목록 조회(인기통계용) -->
	<select id="statListDao.statHitList" parameterClass="params" resultClass="java.util.HashMap">
		/* sql id : statListDao.statHitList */
		SELECT ROWNUM,
		       A.*
		FROM   ( SELECT  A.STATBL_ID 	AS "statblId",
		                A.CATE_ID     	AS "cateId",
		                A.STATBL_NM   	AS "statblNm",
		                A.DTACYCLE_NM 	AS "dtacycleNm" ,
		                VIEW_CNT 		AS "hitCnt",
		                CATE_NM			AS "cateNm",
		                A.CTS_SRV_CD    AS "ctsSrvCd"
		       FROM     TV_STTS_TBL A
		       WHERE    USE_YN       = 'Y'
		       AND      A.OPEN_STATE = 'Y'
		       AND      A.KOR_YN     = 'Y'
		       AND      A.OPEN_DTTM <![CDATA[ < ]]> TRUNC (SYSDATE + 1)
		       ORDER BY VIEW_CNT DESC
		       )
		       A
		WHERE  ROWNUM <![CDATA[ <= ]]> 30
	</select>
	
	<!-- 통계표 목록 조회(최신통계용) -->
	<select id="statListDao.statNewList" remapResults="true" parameterClass="params" resultClass="record">
		/* sql id : statListDao.statNewList */
		SELECT ROWNUM AS ROW_NUM, 
		       A.* 
		  FROM 
		       (SELECT STATBL_TAG                            AS "statblTag"
		              , STATBL_ID                            AS "statblId" 
		              , CATE_ID                              AS "parStatblId" 
		              , STATBL_NM                            AS "statblNm" 
		              , STAT_ID 							 AS "statId"
		              , STAT_NM                              AS "statNm"
		              , DSCN_ID 					         AS "dscnId"
		              , DSCN_NM 							 AS "dscnNm"
		              , DTACYCLE_NM 					     AS "dtacycleNm" 
		              , ORG_NM 							     AS "orgNm"
		              , USR_NM  						     AS "usrNm"
		              , OPEN_STATE 							 AS "openState"
		              , OPEN_DTTM 					         AS "openDttm"
		              , V_ORDER                              AS "vOrder"
		              , CTS_SRV_CD    						 AS "ctsSrvCd"
		              , TO_CHAR(LAST_DTA_DTTM, 'YYYY-MM-DD') AS "lastDtaDttm" 
		         FROM TV_STTS_TBL	
		         WHERE OPEN_STATE ='Y' 
		          AND USE_YN = 'Y'
		          AND KOR_YN ='Y'
		          AND LAST_DTA_DTTM IS NOT NULL
		         ORDER BY LAST_DTA_DTTM DESC
		       ) A
		<![CDATA[		       
		 WHERE ROWNUM <= 30
		]]>    
	</select>
	
	<!-- 모바일 리스트 조회 임시 테이블 구문 -->
	<sql id="statListDao.WithTBStatEasyMobileList">
		WITH TMP_STTS_TBL AS
		(
			<isNotEqual property="statGb" compareValue="ORIGIN">
			SELECT 'C' AS STATBL_TAG
				 , C.CATE_ID AS STATBL_ID
				 , C.PAR_CATE_ID AS PAR_STATBL_ID
				 , C.CATE_NM AS STATBL_NM
			</isNotEqual>
			<isEqual property="statGb" compareValue="ORIGIN">
	        SELECT 'O' AS STATBL_TAG 
	        	  , C.DITC_CD AS STATBL_ID 
	        	  , 'T' AS PAR_STATBL_ID 
	              , C.DITC_NM AS STATBL_NM 
	              , 'N' AS CTS_SRV_CD
	              , C.V_ORDER AS V_ORDER
	              , NULL AS BBS_SEQ
	              , '' AS DATA_START_YY
				  , '' AS DATA_END_YY
				  , '' AS TOP_ORG_NM
				  , '' AS MAP_SRV_CD
	          FROM TB_COMM_CODE C
	         WHERE GRP_CD = 'C1001' 
	       	   AND USE_YN = 'Y'
       		 UNION
			SELECT 'O' AS STATBL_TAG
				 , C.ORG_CD AS STATBL_ID
				 , DECODE(C.PAR_ORG_CD, 'T', C.TYPE_CD, C.PAR_ORG_CD) AS PAR_STATBL_ID
				 , C.ORG_NM AS STATBL_NM
			</isEqual>
				 , 'N' AS CTS_SRV_CD
				 , C.V_ORDER AS V_ORDER
				 , NULL AS BBS_SEQ
				 , '' AS DATA_START_YY
				 , '' AS DATA_END_YY
				 , '' AS TOP_ORG_NM
				 , '' AS MAP_SRV_CD
				 , '' AS DTACYCLE_CD
			<isNotEqual property="statGb" compareValue="ORIGIN">
			  FROM TB_STTS_CATE C
			  WHERE C.USE_YN = 'Y'
			  UNION ALL
			</isNotEqual>
			<isEqual property="statGb" compareValue="ORIGIN">
			  FROM TB_COMM_ORG C
			  WHERE C.USE_YN = 'Y'
			  UNION
			</isEqual>
			SELECT A.STATBL_TAG 
				 , A.STATBL_ID
				 <isNotEqual property="statGb" compareValue="ORIGIN">
				 	<isNotEmpty property="searchVal">
				 	, A.CATE_ID AS PAR_STATBL_ID
				 	</isNotEmpty>
				 	<isEmpty property="searchVal">
				 	, B.CATE_ID AS PAR_STATBL_ID
				 	</isEmpty>
				 </isNotEqual>
				 <isEqual property="statGb" compareValue="ORIGIN">
				 	<isNotEmpty property="searchVal">
				 	, A.ORG_CD AS PAR_STATBL_ID
				 	</isNotEmpty>
				 	<isEmpty property="searchVal">
				 	, B.ORG_CD AS PAR_STATBL_ID
				 	</isEmpty>
				 </isEqual>
				 , A.STATBL_NM
				 , A.CTS_SRV_CD
			 	<isNotEmpty property="searchVal">
	  				, A.V_ORDER
	  			</isNotEmpty>
	  			<isEmpty property="searchVal">
	  				, B.V_ORDER
	  			</isEmpty>
				 , A.BBS_SEQ
				 , A.DATA_START_YY
				 , A.DATA_END_YY
				 , A.TOP_ORG_NM
				 , A.MAP_SRV_CD
				 , A.DTACYCLE_LIST_CD AS DTACYCLE_CD
			  FROM TV_STTS_TBLSMRY A
			  		<isNotEqual property="statGb" compareValue="ORIGIN">
			  			<isEmpty property="searchVal">
			  			INNER JOIN TB_STTS_TBL_CATE B ON A.STATBL_ID = B.STATBL_ID
			  			</isEmpty>
			  		</isNotEqual>
				 	<isEqual property="statGb" compareValue="ORIGIN">
			  			<isEmpty property="searchVal">
			  			INNER JOIN TB_STTS_TBL_USR B ON A.STATBL_ID = B.STATBL_ID AND B.USE_YN = 'Y' AND B.SRC_VIEW_YN = 'Y'
			  			</isEmpty>
			  		</isEqual>
			 WHERE A.KOR_YN = 'Y'
			  <isNotEmpty property="searchDtacycleCd">
			  		AND DTACYCLE_LIST_CD LIKE '%'|| #searchDtacycleCd# ||'%'
			  </isNotEmpty>
		   	  <isNotEmpty property="iterKeywords">
		   	  	<isEqual property="searchGubun" compareValue="STATBL_NM">
					<isEqual property="arrIterKeywords" compareValue="1">
					AND TAG_STATBL_NM LIKE REPLACE('%' || UPPER(#iterKeywords#) || '%', ' ', '')
					</isEqual>
					<isNotEqual property="arrIterKeywords" compareValue="1">
					<iterate property="iterKeywords">
						AND TAG_STATBL_NM LIKE REPLACE('%' || UPPER(#iterKeywords[]#) || '%', ' ', '')
					</iterate>
					</isNotEqual>
				</isEqual>
		   		<isEqual property="searchGubun" compareValue="ITM_NM">
					<isEqual property="arrIterKeywords" compareValue="1">
						AND A.STATBL_ID IN (
						  	SELECT DISTINCT IW.STATBL_ID
						  	FROM   TV_STTS_TBL_ITM IW
							WHERE  IW.TAG_VIEW_ITM_NM LIKE REPLACE('%' || #iterKeywords# || '%', ' ', '')
						)
					</isEqual>
					<isNotEqual property="arrIterKeywords" compareValue="1">
		   			<iterate property="iterKeywords">
						AND A.STATBL_ID IN (
						  	SELECT DISTINCT IW.STATBL_ID
						  	FROM   TV_STTS_TBL_ITM IW
							WHERE  IW.TAG_VIEW_ITM_NM LIKE REPLACE('%' || #iterKeywords[]# || '%', ' ', '')
						)
		        	</iterate>
		        	</isNotEqual>
		   		</isEqual>
		   		<isEqual property="searchGubun" compareValue="ENG_ITM_NM">
					<isEqual property="arrIterKeywords" compareValue="1">
						AND A.STATBL_ID IN (
						  	SELECT DISTINCT IW.STATBL_ID
						  	FROM   TV_STTS_TBL_ITM IW
							WHERE  IW.ENG_TAG_VIEW_ITM_NM LIKE '%' || #iterKeywords# || '%'
						)
					</isEqual>
					<isNotEqual property="arrIterKeywords" compareValue="1">
		   			<iterate property="iterKeywords">
						AND A.STATBL_ID IN (
						  	SELECT DISTINCT IW.STATBL_ID
						  	FROM   TV_STTS_TBL_ITM IW
							WHERE  IW.ENG_TAG_VIEW_ITM_NM LIKE '%' || #iterKeywords[]# || '%'
						)
					</iterate>
					</isNotEqual>
		   		</isEqual>
		   	  </isNotEmpty>
		   	  <isNotEmpty property="searchKeywordVal">
		   		<isEmpty property="langGb">
			   		<isEqual property="isKeywordEtc" compareValue="Y">
			   			AND NOT REGEXP_LIKE(A.STATBL_NM , '^[가-힛]')
			   		</isEqual>
			   		<isNotEqual property="isKeywordEtc" compareValue="Y">
						AND REGEXP_LIKE(A.STATBL_NM , #searchKeywordVal#)	   	 
			   		</isNotEqual>
		   		</isEmpty>
		   		<isNotEmpty property="langGb">
		   			<isEqual property="isKeywordEtc" compareValue="Y">
			   			AND NOT REGEXP_LIKE(A.ENG_STATBL_NM , '^[a-z]|[A-Z]')
			   		</isEqual>
			   		<isNotEqual property="isKeywordEtc" compareValue="Y">
						AND REGEXP_LIKE(UPPER(A.ENG_STATBL_NM) , #searchKeywordVal#)	   	 
			   		</isNotEqual>
		   		</isNotEmpty>
		   	  </isNotEmpty>			   
		)	
	</sql>
	
	<!-- 메인 모바일 리스트 조회(메인 리스트 검색시에도 해당 SELECT 사용) -->
	<select id="statListDao.statEasyMobileList" remapResults="true" parameterClass="params" resultClass="record">
		/* sql id : statListDao.statEasyMobileList */
		<include refid="statListDao.WithTBStatEasyMobileList" />
		
		<isEqual property="paging" compareValue="0">
		SELECT AA.* 
		FROM   (SELECT ROWNUM AS ROW_NUM, AA.*
				FROM   (  
		</isEqual> 
		
		SELECT 
		<isEqual property="statGb" compareValue="NABOCIT">
			 LEVEL-1 AS "Level"
		</isEqual>
		<isNotEqual property="statGb" compareValue="NABOCIT">
			LEVEL AS "Level"
		</isNotEqual>
			 , ROWNUM AS RN
			 , CONNECT_BY_ISLEAF AS "leaf"
			 , DECODE(LEVEL, 1, 'true', 'false') AS "open"
			 , L.STATBL_TAG AS "statblTag"
			 , L.STATBL_ID AS "statblId"
			 , L.STATBL_NM AS "statblNm"
			 <![CDATA[
			 , (
			 	CASE WHEN  L.STATBL_TAG <> 'T' AND LEVEL >= 1 
			 		 THEN (
							SELECT COUNT(*)
							  FROM TMP_STTS_TBL
							 WHERE STATBL_TAG = 'T'
							 START WITH STATBL_ID = L.STATBL_ID
							 CONNECT BY PRIOR STATBL_ID = PAR_STATBL_ID
					 )
		             ELSE NULL 
		             END
			   )  AS "statblExtNm"
			 ]]>
			 <isEqual property="statGb" compareValue="NABOCIT">
			 , DECODE(L.PAR_STATBL_ID, NVL(#treeCateId:VARCHAR#, '300000'), 'T', L.PAR_STATBL_ID)  AS "parStatblId"
			 </isEqual>
			 <isNotEqual property="statGb" compareValue="NABOCIT">
			 , L.PAR_STATBL_ID  AS "parStatblId"
			 </isNotEqual>
			 , L.V_ORDER AS "vOrder"
			 , CTS_SRV_CD AS "ctsSrvCd"
			 , BBS_SEQ AS "bbsSeq"
			 , L.TOP_ORG_NM AS "topOrgNm"
			 , SUBSTR(SYS_CONNECT_BY_PATH(STATBL_NM, '>'), 2) AS "fullPath"
			 , MAP_SRV_CD  AS "mapSrvCd"
			 , DTACYCLE_CD AS "dtacycleListCd"
		  FROM TMP_STTS_TBL L
		 WHERE 1=1
		   AND L.STATBL_TAG = 'T'
		 <isEqual property="statGb" compareValue="NABOCIT">
		 			AND LEVEL <![CDATA[ > ]]> 1
		 </isEqual>
		 <isNotEmpty property="multiGb">
		   AND (L.CTS_SRV_CD IS NULL OR L.CTS_SRV_CD = 'N')
		 </isNotEmpty>
		   AND EXISTS (SELECT 1
	                     FROM TMP_STTS_TBL E
	                    WHERE 1=1
	                       AND E.STATBL_TAG = 'T'
	                    <isNotEmpty property="multiGb">
						   AND E.CTS_SRV_CD = 'N' 
						 </isNotEmpty>	
	                    START	WITH E.STATBL_ID = L.STATBL_ID
	                    CONNECT BY PRIOR E.STATBL_ID = E.PAR_STATBL_ID )
	            <isEmpty property="mbSubject">       
		 			START WITH L.PAR_STATBL_ID = 'T'
		 			<isEqual property="statGb" compareValue="NABOCIT">
		 			AND   L.STATBL_ID = #treeCateId:VARCHAR#
		 			</isEqual>
		 		</isEmpty> 
		 		<isNotEmpty property="mbSubject">
		 			<isEqual property="statGb" compareValue="NABOCIT">
		 			START WITH L.STATBL_ID = #mbSubject#
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="SUBJ">
		 			START WITH L.STATBL_ID = #mbSubject#
		 			AND L.STATBL_TAG = 'C'
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="NAME">
		 			START WITH L.STATBL_ID = #mbSubject#
		 			AND L.STATBL_TAG = 'C'
		 			</isEqual>
		 			<isEqual property="statGb" compareValue="ORIGIN">
		 			START WITH L.STATBL_ID = #mbSubject#
		 			AND L.STATBL_TAG = 'O'
		 			</isEqual>
		 		</isNotEmpty>
	  	 CONNECT BY PRIOR L.STATBL_ID = L.PAR_STATBL_ID
	  	 <isEqual property="sortGb" compareValue="ASC">
		  ORDER SIBLINGS BY L.V_ORDER ASC, L.STATBL_NM ASC
		 </isEqual>
	  	 <isEqual property="sortGb" compareValue="DESC">
		  ORDER SIBLINGS BY L.V_ORDER DESC, L.STATBL_NM DESC
		 </isEqual>
		<isEqual property="paging" compareValue="0">
		<![CDATA[
				) AA
			WHERE ROWNUM <= #end:NUMERIC#
			) AA
		WHERE AA.ROW_NUM >= #start:NUMERIC#
		]]>
		</isEqual>			
		
	</select>
	
	<!-- 메인 모바일 리스트 카운트(페이징이여서 카운트 필요) -->
	<select id="statListDao.statEasyMobileListCount" parameterClass="params" resultClass="int">
		/* sql id : statListDao.statEasyMobileListCount */
		
		<include refid="statListDao.WithTBStatEasyMobileList" />
		
		SELECT 
			COUNT(*)
		  FROM TMP_STTS_TBL L
		 WHERE 1=1
		   AND L.STATBL_TAG = 'T'
		 <isEqual property="statGb" compareValue="NABOCIT">
		 			AND LEVEL <![CDATA[ > ]]> 1
		 </isEqual>
		 <isNotEmpty property="multiGb">
		   AND (L.CTS_SRV_CD IS NULL OR L.CTS_SRV_CD = 'N')
		 </isNotEmpty>
		   AND EXISTS (SELECT 1
	                     FROM TMP_STTS_TBL E
	                    WHERE 1=1
	                       AND E.STATBL_TAG = 'T'
	                    <isNotEmpty property="multiGb">
						   AND E.CTS_SRV_CD = 'N' 
						 </isNotEmpty>	
	                    START	WITH E.STATBL_ID = L.STATBL_ID
	                    CONNECT BY PRIOR E.STATBL_ID = E.PAR_STATBL_ID )
					<isEmpty property="mbSubject">       
			 			START WITH L.PAR_STATBL_ID = 'T'
			 			<isEqual property="statGb" compareValue="NABOCIT">
			 			AND   L.STATBL_ID = #treeCateId:VARCHAR#
			 			</isEqual>
			 		</isEmpty> 
			 		<isNotEmpty property="mbSubject">
			 			<isEqual property="statGb" compareValue="NABOCIT">
			 			START WITH L.STATBL_ID = #mbSubject#
			 			</isEqual>
			 			<isEqual property="statGb" compareValue="SUBJ">
			 			START WITH L.STATBL_ID = #mbSubject#
			 			AND L.STATBL_TAG = 'C'
			 			</isEqual>
			 			<isEqual property="statGb" compareValue="NAME">
			 			START WITH L.STATBL_ID = #mbSubject#
			 			AND L.STATBL_TAG = 'C'
			 			</isEqual>
			 			<isEqual property="statGb" compareValue="ORIGIN">
			 			START WITH L.STATBL_ID = #mbSubject#
			 			AND L.STATBL_TAG = 'O'
			 			</isEqual>
			 		</isNotEmpty>
	  	 CONNECT BY PRIOR L.STATBL_ID = L.PAR_STATBL_ID
		  ORDER SIBLINGS BY L.V_ORDER, L.STATBL_NM
	</select>
	
	<!-- 통계주제 최상위 레벨(주제별/통계명/위원회/출처별) -->
	<select id="statListDao.statCateTopList" parameterClass="params" resultClass="record">
		/* sql id : statListDao.statCateTopList  */
		SELECT 
		<isNotEqual property="statGb" compareValue="ORIGIN"> 
		       CATE_ID AS "cateId"
		     , CATE_NM AS "cateNm"
		  FROM TB_STTS_CATE
		 WHERE USE_YN = 'Y'
		 <isEqual property="statGb" compareValue="NABOCIT">
		   AND PAR_CATE_ID = '300000' 	<!-- 위원회 -->
		 </isEqual> 
		 <isNotEqual property="statGb" compareValue="NABOCIT">
		   AND PAR_CATE_ID = 'T' 		<!-- 주제별/통계별 -->
		 </isNotEqual>     
		</isNotEqual>
		<isEqual property="statGb" compareValue="ORIGIN">
			   ORG_CD AS "cateId"
		       , ORG_NM AS "cateNm" 
		  FROM TB_COMM_ORG 				<!-- 출처별 -->
         WHERE USE_YN = 'Y' 
           AND PAR_ORG_CD = 'T'
		</isEqual>
		 ORDER BY V_ORDER
	</select>
	
	<!-- 통계표 상세조회 -->
	<select id="statListDao.selectStatDtl" parameterClass="params" resultClass="java.util.HashMap">
		/* sql id : statListDao.selectStatDtl */
		
		SELECT
			A.STATBL_ID 							AS "statblId"
			<isEmpty property="langGb">
			, A.STATBL_NM							AS "statblNm"
			</isEmpty>
			<isNotEmpty property="langGb">
			, A.ENG_STATBL_NM						AS "statblNm"
			</isNotEmpty>
			, A.CATE_ID								AS "cateId"
			, C.CATE_NM								AS "cateNm"
			, C.CATE_FULLNM 						AS "cateFullnm"
			, A.RPSTUI_NM							AS "rpstuiNm"
			, A.SCHW_TAG_CONT						AS "schwTagCont"
			, A.ENG_SCHW_TAG_CONT					AS "engSchwTagCont"
			, A.FVT_DATA_ORDER						AS "fvtDataOrder"
			, TO_CHAR(A.OPEN_DTTM, 'YYYY-MM-DD')	AS "openDttm"
			, SUBSTR(A.WRT_START_YMD, 1, 4)			AS "wrtStartYmd"
			, SUBSTR(A.WRT_END_YMD, 1, 4)			AS "wrtEndYmd"
			, A.HIS_CYCLE_YN						AS "hisCycleYn"
			, A.STAT_ID                             AS "statId"
			, A.CTS_SRV_CD    <!--  NABO 통계표 컨텐츠 사용 여부 -->
	        , BBS.STTSCT_SEQ  
		    , BBS.NABOE_SEQ  
		    , BBS.NABOR_SEQ  
		    , BBS.NABOO_SEQ  
		    , BBS.NABOC_SEQ  
		    , BBS.STTSQA_SEQ 
		    , BBS.DIC_SEQ 
	        , A.MAP_SRV_CD <!-- MAP 구분 -->
	        , FN_GET_CMMT_IDTFR(A.CMMT_IDTFR)		AS "cmmtIdtfr"
	        , A.DATA_DTTM_CONT						AS "dataDttmCont"
	        , STATBL_CMMT							AS "statblCmmt"
		FROM 
			TB_STTS_TBL A
			INNER JOIN TB_STTS_STAT B
				ON  A.STAT_ID = B.STAT_ID
			INNER JOIN TB_STTS_CATE C
				ON  A.CATE_ID = C.CATE_ID
			LEFT OUTER JOIN ( 
			  	  SELECT STATBL_ID, 
			  	  		 MAX(DECODE(BBS_CD , 'STTSCT', SEQ, 0)) AS STTSCT_SEQ , <!-- NABO 통계표 컨텐츠  -->
       					 MAX(DECODE(BBS_CD , 'NABOE', SEQ, 0)) AS NABOE_SEQ ,   <!-- NABO 통계해설 --> 
                         MAX(DECODE(BBS_CD , 'NABOR', SEQ, 0)) AS NABOR_SEQ ,   <!-- NABO 분석 -->
                         MAX(DECODE(BBS_CD , 'NABOO', SEQ, 0)) AS NABOO_SEQ ,   <!-- NABO 국회부대의견 -->
                         MAX(DECODE(BBS_CD , 'NABOC', SEQ, 0)) AS NABOC_SEQ ,   <!-- NABO 시정조치 -->
      					 MAX(DECODE(BBS_CD , 'STTSQA',SEQ, 0)) AS STTSQA_SEQ ,  <!-- NABO 통계표 질의 답변 -->
      					 MAX(DECODE(BBS_CD , 'DIC',SEQ, 0)) AS DIC_SEQ 	        <!-- NABO 통계용어사전 --> 
			      FROM TB_BBS_TBL
			      WHERE STATBL_ID = #statblId:VARCHAR#
			       	  AND BBS_CD IN ('STTSQA','NABOC','NABOO','NABOR','NABOE','STTSCT', 'DIC')
			          AND DEL_YN = 'N'
			      GROUP BY STATBL_ID
			  )  BBS  ON A.STATBL_ID = BBS.STATBL_ID	
		WHERE
			A.USE_YN = 'Y'	
		AND A.STATBL_ID = #statblId:VARCHAR#
		AND A.OPEN_STATE = 'Y'
		<![CDATA[
		AND A.OPEN_DTTM < TRUNC (SYSDATE + 1)
		]]>
	</select>
	
	<!-- 통계 메타 데이터 조회(통계설명자료 조회) -->
	<select id="statListDao.selectStatSttsMeta" parameterClass="params" resultClass="record">
		SELECT 
			S.META_ID			AS "metaId"
			, S.META_NM			AS "metaNm"
			, S.STTS_CD			AS "sttsCd"
			, S.V_ORDER			AS "vOrder"
			, S.STDDMETA_YN		AS "stddmetaYn"
			, S.USE_YN			AS "useYn"
			, M.STAT_ID			AS "statId"
			, S.META_CD			AS "metaCd"
			, C1.DITC_NM 		AS "metaCdNm"	
			, (CASE 
				WHEN S.METATY_CD = 'SB' AND S.GRP_CD IS NOT NULL AND C.DITC_CD IS NOT NULL 
				THEN 
				<isEmpty property="langGb">
					FN_GET_COMM_CODE_NM(S.GRP_CD, C.DITC_CD)
				</isEmpty>	
				<isNotEmpty property="langGb">
					FN_GET_COMM_CODE_ENM(S.GRP_CD, C.DITC_CD)
				</isNotEmpty>	
				WHEN S.METATY_CD = 'FL' 
				THEN CASE 
					WHEN C.VIEW_FILE_NM IS NOT NULL 
					THEN C.VIEW_FILE_NM || '.' || C.FILE_EXT ELSE '' END 
				ELSE 
				<isEmpty property="langGb">
					C.META_CONT 
				</isEmpty>
				<isNotEmpty property="langGb">
					C.ENG_META_CONT 
				</isNotEmpty>
				END) AS "metaCont"
		FROM 
			TB_STTS_STDDMETA S 
			INNER JOIN TB_STTS_STAT M 
				ON  S.STTS_CD = M.STTS_CD  
				AND S.USE_YN = 'Y' 
				AND M.USE_YN = 'Y'  
				AND M.STAT_ID = (SELECT STAT_ID FROM TB_STTS_TBL WHERE STATBL_ID = #statblId:VARCHAR#)
			LEFT JOIN TB_COMM_CODE C1 
				ON  S.META_CD = C1.DITC_CD  
				AND C1.GRP_CD = 'S1001' 
				AND C1.USE_YN = 'Y'
			LEFT JOIN TV_STTS_STAT_META C
				ON  M.STAT_ID = C.STAT_ID 
				AND S.META_ID = C.META_ID 
				AND C.STATBL_ID IN ( #statblId:VARCHAR#, 'COMM')
		ORDER BY 
			NVL(C1.V_ORDER, 999)
			, S.META_CD
			, S.V_ORDER	
	</select>
	
	<!-- 통계표 옵션정보 조회 -->
	<select id="statListDao.selectStatDtlOpt" parameterClass="params" resultClass="java.util.HashMap">
		/* sql id : statListDao.selectStatDtlOpt */
		SELECT
			STATBL_ID	AS "statblId"
			, OPT_CD	AS "optCd"
			, OPT_VAL	AS "optVal"
		FROM 
			TB_STTS_TBL_OPT 
		WHERE 
			STATBL_ID = #statblId:VARCHAR#
		AND USE_YN = 'Y'	
	</select>
	
	<!-- 통계자료 작성일정 조회 -->
	<select id="statListDao.selectStatDtlSchl" parameterClass="params" resultClass="java.util.HashMap">
		/* sql id : statListDao.selectStatDtlSchl */
		SELECT
			STATBL_ID		AS "statblId"
			, DTACYCLE_CD	AS "dtacycleCd"
			, WRTTIME_IDTFR	AS "wrttimeIdtfr"
			, WRTSTDD_CD	AS "wrtstddCd"
			, SUBSTR(WRT_START_MD, 1, 2) || '-' || SUBSTR(WRT_START_MD, 3, 4) 	AS "wrtStartMd"
         	, SUBSTR(WRT_END_MD, 1, 2) || '-' || SUBSTR(WRT_END_MD, 3, 4) 		AS "wrtEndMd"
		FROM 
			TB_STTS_TBL_SCHL
		WHERE 
			STATBL_ID = #statblId:VARCHAR#	
	</select>
	
	<!-- 통계표 작성주기 검색 -->
	<select id="statListDao.selectStatDtacycleList" parameterClass="params" resultClass="record">
		SELECT 
			A.DITC_CD 	AS "code"
			<isEmpty property="langGb">
			, A.DITC_NM	AS "name"
			</isEmpty>
			<isNotEmpty property="langGb">
			, A.ENG_DITC_NM	AS "name"
			</isNotEmpty>
		FROM
			TB_COMM_CODE A
				INNER JOIN (
					SELECT DISTINCT DTACYCLE_CD
					FROM   TB_STTS_TBL_SCHL
					WHERE  STATBL_ID = #statblId:VARCHAR#
				) B
				ON  A.DITC_CD = B.DTACYCLE_CD
		WHERE
			A.GRP_CD = 'S1103'
		AND A.USE_YN = 'Y'
		ORDER BY V_ORDER	
	</select>	

   	<!-- 통계표 항목분류 리스트 조회 -->
	<select id="statListDao.selectStatItmList" parameterClass="params" resultClass="java.util.HashMap">
		/* sql id : statListDao.selectStatItmList */
		SELECT
			A.STATBL_ID			AS "statblId"
			, A.DATANO			AS "datano"
			, A.PAR_DATANO		AS "parDatano"
			, A.ITM_TAG			AS "itmTag"
			, A.ITM_ID			AS "itmId"
			, A.ITM_NM			AS "itmNm"
			, A.VIEW_ITM_NM		AS "viewItmNm"
			, A.ENG_VIEW_ITM_NM	AS "engViewItmNm"
			, A.DUMMY_YN		AS "dummyYn"
			, A.CHCK_CD			AS "chckCd"
			, A.UI_ID			AS "uiId"
			, A.UI_NM			AS "uiNm"
			, A.CMMT_CONT		AS "cmmtCont"
			, A.ENG_CMMT_CONT	AS "engCmmtCont"
			, A.INPUT_NEED_YN	AS "inputNeedYn"
			, A.DEF_SEL_YN		AS "defSelYn"
			, A.SERIES_CD		AS "seriesCd"
			, A.USE_YN			AS "useYn"
			, A.V_ORDER			AS "vOrder"
			, LEVEL				AS "Level"
			, FN_GET_CMMT_IDTFR(A.CMMT_IDTFR)		AS "cmmtIdtfr"
		FROM
			TV_STTS_TBL_ITM A
		START WITH 
			A.STATBL_ID = #statblId:VARCHAR# 
			AND A.PAR_DATANO = 0
		<isNotEmpty property="gb">
			AND A.ITM_TAG = #gb:CHAR#
		</isNotEmpty>
		CONNECT BY 
			PRIOR DATANO = PAR_DATANO 
			AND PRIOR A.STATBL_ID = A.STATBL_ID
		<isNotEmpty property="gb">	
			AND PRIOR A.ITM_TAG = A.ITM_TAG
		</isNotEmpty>
		ORDER SIBLINGS BY A.V_ORDER
	</select>
	<select id="statListDao.selectStatItmListCount" parameterClass="params" resultClass="int">
		/* sql id : statListDao.selectStatItmListCount */
		SELECT
			COUNT(*)
		FROM
			TV_STTS_TBL_ITM A
		START WITH 
			A.STATBL_ID = #statblId:VARCHAR# 
			AND A.PAR_DATANO = 0
		<isNotEmpty property="gb">
			AND A.ITM_TAG = #gb:CHAR#
		</isNotEmpty>
		CONNECT BY
			PRIOR DATANO = PAR_DATANO
		<isNotEmpty property="gb"> 
			AND PRIOR A.STATBL_ID = A.STATBL_ID
		</isNotEmpty>
		ORDER SIBLINGS BY A.V_ORDER
	</select>   

  	<!-- 통계표 항목분류 리스트 조회 -->
	<select id="statListDao.statItmJson" parameterClass="params" resultClass="record">
		/* sql id : statListDao.statItmJson */
		SELECT 
			  LEVEL 				AS "Level"
			, L.STATBL_ID			AS "statblId"
			, L.DATANO				AS "datano"
			, L.PAR_DATANO			AS "parDatano"
			, L.ITM_TAG				AS "itmTag"
			, L.ITM_ID				AS "itmId"
			<isEmpty property="langGb">
			, L.ITM_NM				AS "itmNm"
			, L.VIEW_ITM_NM			AS "viewItmNm"
			, L.VIEW_ITM_FULLNM 	AS "viewItmFullnm"
			, L.UI_NM				AS "uiNm"
			</isEmpty>
			<isNotEmpty property="langGb">
			, L.ENG_ITM_NM				AS "itmNm"
			, L.ENG_VIEW_ITM_NM			AS "viewItmNm"
			, L.ENG_VIEW_ITM_FULLNM 	AS "viewItmFullnm"
			, L.ENG_UI_NM				AS "uiNm"
			</isNotEmpty>
			, L.DUMMY_YN			AS "dummyYn"
			, L.USE_YN				AS "useYn"
			, L.V_ORDER				AS "vOrder"
			, DECODE(L.DEF_SEL_YN, 'Y', 'true', 'false') AS "checked"
			, 'true'				AS "open"
			, DECODE(CONNECT_BY_ISLEAF, 0, 'C', 1, 'T') AS "leaf"
		 FROM TV_STTS_TBL_ITM L
		WHERE 1=1
		START WITH STATBL_ID = #statblId:VARCHAR#
					 AND L.PAR_DATANO = 0 
					 <isNotEmpty property="itmTag">
					 AND L.ITM_TAG = #itmTag:CHAR#
					 </isNotEmpty>
					 AND L.USE_YN = 'Y'
		CONNECT BY 	PRIOR L.STATBL_ID = L.STATBL_ID 
					 AND PRIOR L.DATANO = L.PAR_DATANO
					 AND PRIOR L.ITM_TAG = L.ITM_TAG
 					 AND PRIOR L.USE_YN = L.USE_YN
		ORDER SIBLINGS BY L.V_ORDER, VIEW_ITM_NM
	</select>
	
	<!-- 통계표 옵션 값 조회 -->
	<select id="statListDao.selectStatTblOptVal" parameterClass="params" resultClass="record">
		SELECT OPT_VAL AS "optVal" 
		FROM   TB_STTS_TBL_OPT
		WHERE  STATBL_ID = #statblId:VARCHAR#
		AND    USE_YN = 'Y'
		<isNotEmpty property="optCd">
			AND    OPT_CD = #optCd:VARCHAR#
		</isNotEmpty>
	</select>
	
    <!-- 시트 표두/표측 설정 -->
    <select id="statListDao.selectStatTblItm" remapResults="true"  parameterClass="params" resultClass="record">
    	 /* sql id : statListDao.selectStatTblItm */
		WITH TMP_STATTBL_ITM AS
		(
			SELECT 
				I.STATBL_ID
				, Y.WRTTIME_IDTFR_ID
				, Y.CMMT_IDTFR AS WRTTIME_CMMT_IDTFR
       		    , Y.WRTTIME_IDTFR_NM
       		    , G.GRP_DATANO
				, G.GRP_FULLNM
				, G.GRP_LEVEL
				, MAX(G.GRP_LEVEL) OVER ( ) AS MAX_GRP_LEVEL
				, G.GRP_ORDER
				, G.GRP_FULL_CMMT_IDTFR
				, C.CLS_DATANO
				, C.CLS_FULLNM
				, C.CLS_LEVEL
				, MAX(C.CLS_LEVEL) OVER() AS MAX_CLS_LEVEL
				, C.CLS_ORDER
				, C.CLS_FULL_CMMT_IDTFR
				, I.ITM_FULL_CMMT_IDTFR
				, I.ITM_DATANO
				, I.ITM_FULLNM
				, I.ITM_LEVEL
				, MAX(I.ITM_LEVEL) OVER() AS MAX_ITM_LEVEL
				, (CASE WHEN I.GRP_UI_ID = U.GRP_UI_ID THEN  
		  	 				FN_GET_DTADVS_UI(O.DTADVS_CD, 'UI_ID', U.UI_ID)
		 	   	    	ELSE 
		 	 	   			FN_GET_DTADVS_UI(O.DTADVS_CD, 'UI_ID', I.UI_ID)
			 	   		END)  AS UI_ID
				, (CASE WHEN I.GRP_UI_ID = U.GRP_UI_ID THEN  
		  	 				FN_GET_DTADVS_UI(O.DTADVS_CD, 'UI_NM', 
						  	 				 <isEmpty property="langGb">
						  	 			 	 U.UI_NM
						  	 				 </isEmpty>
						  	 				 <isNotEmpty property="langGb">
						  	 				 U.ENG_UI_NM
						  	 				 </isNotEmpty>
						  	 				)
		 	   	    	ELSE 
		 	 	   			FN_GET_DTADVS_UI(O.DTADVS_CD, 'UI_NM', I.UI_NM)
			 	   		END)  AS UI_NM				
				
				, I.ITM_ORDER
				, O.DTADVS_CD
				, O.DTADVS_NM
				, O.DTADVS_ORDER
			FROM
				(
					SELECT 
						STATBL_ID
						, DATANO AS ITM_DATANO
						, PAR_DATANO AS PAR_ITM_DATANO
						<isEmpty property="langGb">
						, VIEW_ITM_FULLNM AS ITM_FULLNM
						</isEmpty>
						<isNotEmpty property="langGb">
						,ENG_VIEW_ITM_FULLNM AS ITM_FULLNM
						</isNotEmpty>
						, DUMMY_YN
						<![CDATA[
						, SUBSTR(SYS_CONNECT_BY_PATH(FN_GET_CMMT_IDTFR(SI.CMMT_IDTFR), '>'), 2) AS ITM_FULL_CMMT_IDTFR
						]]>
						, GRP_UI_ID
						, UI_ID
						, UI_NM
						, ROWNUM AS ITM_ORDER
						, LEVEL AS ITM_LEVEL
						, SI.ITM_START_YM
						, SI.ITM_END_YM
					FROM 
						TV_STTS_TBL_ITM SI
					WHERE DUMMY_YN = 'N'
					<isEmpty property="iterChkItms">
					AND  SI.DEF_SEL_YN = 'Y'
					</isEmpty>
					<isNotEmpty property="iterChkItms">	<!-- 선택한 항목 in 조회 -->
		            	<iterate property="iterChkItms" prepend="AND SI.DATANO IN " open="(" close=")" conjunction=", ">
		            		#iterChkItms[]#
		            	</iterate>
		            </isNotEmpty>
					START WITH STATBL_ID = #statblId:VARCHAR# 	
						AND ITM_TAG = 'I' 
						AND PAR_DATANO = 0 
						AND USE_YN = 'Y'
					<isEmpty property="iterChkItms">
						AND SI.DEF_SEL_YN = 'Y'
					</isEmpty>
					CONNECT BY PRIOR DATANO = PAR_DATANO  	
						AND STATBL_ID = #statblId:VARCHAR# AND USE_YN = 'Y'
					ORDER SIBLINGS BY V_ORDER
				) I 
				LEFT OUTER JOIN TB_STTS_STDDUI U
        	 			ON  U.GRP_UI_ID = I.GRP_UI_ID
        	 		<!-- 단위 변환시 -->
        	 		<isEmpty property="uiChgVal">
        	 			AND U.UI_ID = I.UI_ID
        	 		</isEmpty>
        	 		<isNotEmpty property="uiChgVal">
        	 			AND U.UI_ID = #uiChgVal#
        	 		</isNotEmpty>
				LEFT OUTER JOIN
				(
					SELECT STATBL_ID
						, DATANO AS CLS_DATANO
						, PAR_DATANO AS PAR_CLS_DATANO
						<isEmpty property="langGb">
						, VIEW_ITM_FULLNM AS CLS_FULLNM
						</isEmpty>
						<isNotEmpty property="langGb">
						, ENG_VIEW_ITM_FULLNM AS CLS_FULLNM
						</isNotEmpty>
						, DUMMY_YN
						<![CDATA[
						, SUBSTR(SYS_CONNECT_BY_PATH(FN_GET_CMMT_IDTFR(SC.CMMT_IDTFR), '>'), 2) AS CLS_FULL_CMMT_IDTFR
						]]>
						, '' GRP_UI_ID
						, '' UI_ID
						, '' UI_NM
						, V_ORDER
						, ROWNUM AS CLS_ORDER
						, LEVEL AS CLS_LEVEL
						, SC.ITM_START_YM
						, SC.ITM_END_YM
					FROM TV_STTS_TBL_ITM SC
					WHERE DUMMY_YN = 'N'
					<isEmpty property="iterChkClss">
						AND SC.DEF_SEL_YN = 'Y'
					</isEmpty>
					<isNotEmpty property="iterChkClss">	<!-- 선택한 항목 in 조회 -->
		            	<iterate property="iterChkClss" prepend="AND SC.DATANO IN " open="(" close=")" conjunction=", ">
		            		#iterChkClss[]#
		            	</iterate>
		            </isNotEmpty>	
					START WITH STATBL_ID = #statblId:VARCHAR#	
						AND ITM_TAG = 'C' 
						AND PAR_DATANO = 0 
						AND USE_YN = 'Y'
					<isEmpty property="iterChkClss">
						AND SC.DEF_SEL_YN = 'Y'
					</isEmpty>	
					CONNECT BY PRIOR DATANO = PAR_DATANO 
						AND STATBL_ID = #statblId:VARCHAR# AND USE_YN = 'Y'
					ORDER SIBLINGS BY V_ORDER
				) C ON I.STATBL_ID = C.STATBL_ID
				LEFT OUTER JOIN
				(
					SELECT STATBL_ID
						, DATANO AS GRP_DATANO
						, PAR_DATANO AS PAR_GRP_DATANO
						<isEmpty property="langGb">
						, VIEW_ITM_FULLNM AS GRP_FULLNM
						</isEmpty>
						<isNotEmpty property="langGb">
						, ENG_VIEW_ITM_FULLNM AS GRP_FULLNM
						</isNotEmpty>
						, DUMMY_YN
						<![CDATA[
						, SUBSTR(SYS_CONNECT_BY_PATH(FN_GET_CMMT_IDTFR(SG.CMMT_IDTFR), '>'), 2) AS GRP_FULL_CMMT_IDTFR
						]]>
						, '' GRP_UI_ID
						, '' UI_ID
						, '' UI_NM
						, V_ORDER
						, ROWNUM AS GRP_ORDER
						, LEVEL AS GRP_LEVEL
						, SG.ITM_START_YM
						, SG.ITM_END_YM
					FROM TV_STTS_TBL_ITM SG
					WHERE DUMMY_YN = 'N'
					<isEmpty property="iterChkGrps">
						AND SG.DEF_SEL_YN = 'Y'
					</isEmpty>
					<isNotEmpty property="iterChkGrps">	<!-- 선택한 항목 in 조회 -->
		            	<iterate property="iterChkGrps" prepend="AND SG.DATANO IN " open="(" close=")" conjunction=", ">
		            		#iterChkGrps[]#
		            	</iterate>
		            </isNotEmpty>	
					START WITH STATBL_ID = #statblId:VARCHAR#	
						AND ITM_TAG = 'G' 
						AND PAR_DATANO = 0 
						AND USE_YN = 'Y'
					<isEmpty property="iterChkGrps">
						AND SG.DEF_SEL_YN = 'Y'
					</isEmpty>
					CONNECT BY PRIOR DATANO = PAR_DATANO 
						AND STATBL_ID = #statblId:VARCHAR# AND USE_YN = 'Y'
					ORDER SIBLINGS BY V_ORDER
				) G ON I.STATBL_ID = G.STATBL_ID
				CROSS JOIN
		        (
		            SELECT DITC_CD	AS DTADVS_CD
		                <isEmpty property="langGb">
		                , DITC_NM 	AS DTADVS_NM
		                </isEmpty>
						<isNotEmpty property="langGb">
		                , ENG_DITC_NM AS DTADVS_NM  
		                </isNotEmpty>
		                ,  V_ORDER AS DTADVS_ORDER
		             FROM TB_COMM_CODE
		            WHERE GRP_CD = 'S1102' 
		              AND DITC_CD IN 
		            <isEmpty property="iterDtadvsVal">	<!-- 통계자료 유형 통계표에 설정된 대로 조회 -->
		            	( 'OD' )    
		            </isEmpty>
		            <isNotEmpty property="iterDtadvsVal">	<!-- 통계자료 유형 선택한 항목 -->
		            	<iterate property="iterDtadvsVal" open="(" close=")" conjunction=", ">
		            		#iterDtadvsVal[]#
		            	</iterate>
		            </isNotEmpty>
		            ORDER BY V_ORDER   
		        ) O
				CROSS JOIN
		        (
		        	SELECT WRTTIME_IDTFR_ID, WRTTIME_IDTFR_NM, CMMT_IDTFR, F_WRTTIME_IDTFR_ID
		        	FROM (
				        	SELECT 
				        		<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
				       				<isEqual property="SheetLoc" compareValue="H">		<!-- 헤더 정보 세팅할 경우 -->
						       		SUBSTR(WRTTIME_IDTFR_ID,5,2) AS WRTTIME_IDTFR_ID
						       		, CMMT_IDTFR
					       			, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#, SUBSTR(WRTTIME_IDTFR_ID,5,2)) AS WRTTIME_IDTFR_NM
					       			</isEqual>
				       				<isEqual property="SheetLoc" compareValue="L">		<!-- 표측 정보 세팅할 경우 -->
					       			SUBSTR(WRTTIME_IDTFR_ID,0,4) AS WRTTIME_IDTFR_ID
					       			, CMMT_IDTFR
					       			, FN_GET_WRTTIME_IDTFR_NM('YY', SUBSTR(WRTTIME_IDTFR_ID,0,4))	AS WRTTIME_IDTFR_NM
					       			</isEqual>
					       		</isEqual>
					       		<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
					       		WRTTIME_IDTFR_ID
					       		, CMMT_IDTFR
					       		, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#,  WRTTIME_IDTFR_ID)	AS WRTTIME_IDTFR_NM
					       		</isNotEqual>
					       		, WRTTIME_IDTFR_ID AS F_WRTTIME_IDTFR_ID
					       		, RN, MAX(RN) OVER() AS MAX_RN
		                      FROM (
		                      			<!-- TB_STTS_TBL_DIF 에 데이터가 없으면 기본 시계열 정보를 전달하여 항목/분류를 출력한다.  -->
          							 SELECT CONCAT(#wrttimeMinYear:VARCHAR#, #wrttimeMinQt:VARCHAR#) AS WRTTIME_IDTFR_ID , 
          							        NULL AS CMMT_IDTFR,
                							0 AS RN 
          							 FROM DUAL
          							UNION ALL     
		                             SELECT WRTTIME_IDTFR_ID
		                                 , CMMT_IDTFR
		                                 , ROW_NUMBER() OVER(ORDER BY WRTTIME_IDTFR_ID DESC) AS RN
		                              FROM TB_STTS_TBL_DIF
		                             WHERE STATBL_ID = #statblId:VARCHAR#
		                               AND DTACYCLE_CD = #dtacycleCd:VARCHAR#
		                               AND WRTSTATE_CD = 'AC'
									<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
									   AND WRTTIME_IDTFR_ID BETWEEN CONCAT(#wrttimeStartYear:VARCHAR#, #wrttimeStartQt:VARCHAR#) AND CONCAT(#wrttimeEndYear:VARCHAR#, #wrttimeEndQt:VARCHAR#)
									</isEqual>
									<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
									   AND WRTTIME_IDTFR_ID BETWEEN CONCAT(#wrttimeMinYear:VARCHAR#, #wrttimeMinQt:VARCHAR#) AND CONCAT(#wrttimeMaxYear:VARCHAR#, #wrttimeMaxQt:VARCHAR#)
									</isEqual>
				        		)
				        	<isEqual property="wrttimeType" compareValue="L">
				        	<![CDATA[	
				        	WHERE  RN <= #wrttimeLastestVal:NUMERIC#
				        	]]>
				        	</isEqual>
				        ) A WHERE RN >= (CASE WHEN MAX_RN = 0 THEN 0 ELSE 1 END)	
		        ) Y
	        <!-- 시계열별 유효한 지표만 가져오기(표로 보기일때) -->
	        <isEqual property="viewLocOpt" compareValue="T">
	        	<isEqual property="SheetLoc" compareValue="H">
			        WHERE Y.WRTTIME_IDTFR_ID BETWEEN NVL(I.ITM_START_YM, '01')   AND NVL(I.ITM_END_YM, '12')
	                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(C.ITM_START_YM , '01')  AND NVL(C.ITM_END_YM , '12')
	                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(G.ITM_START_YM , '01')  AND NVL(G.ITM_END_YM , '12')
	        	</isEqual>
	        	<isEqual property="SheetLoc" compareValue="L">
	        		WHERE Y.WRTTIME_IDTFR_ID BETWEEN NVL(I.ITM_START_YM, '190000')   AND NVL(I.ITM_END_YM, '999912')
	                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(C.ITM_START_YM , '190000')  AND NVL(C.ITM_END_YM , '999912')
	                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(G.ITM_START_YM , '190000')  AND NVL(G.ITM_END_YM , '999912')
	        	</isEqual>
	        </isEqual>
	        <isNotEqual property="viewLocOpt" compareValue="T">
		        WHERE Y.WRTTIME_IDTFR_ID BETWEEN NVL(I.ITM_START_YM, '190000')   AND NVL(I.ITM_END_YM, '999912')
                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(C.ITM_START_YM , '190000')  AND NVL(C.ITM_END_YM , '999912')
                AND   Y.WRTTIME_IDTFR_ID BETWEEN NVL(G.ITM_START_YM , '190000')  AND NVL(G.ITM_END_YM , '999912')
	        </isNotEqual>
		)
		 SELECT 
		 	STATBL_ID		AS "statblId"
		<isEqual property="SheetLoc" compareValue="H">		<!-- 표두일 경우 키 값 접두어 -->
		 	, 'COL_'
		</isEqual>
		<isEqual property="SheetLoc" compareValue="L">		<!-- 표측일 경우 키 값 접두어 -->
		 	, 'ROW_'
		</isEqual>

		<isNotEmpty property="STUseYn">
			<isEqual property="STUseYn" compareValue="Y">	 	
			|| WRTTIME_IDTFR_ID
			</isEqual>
		</isNotEmpty>

		<isNotEmpty property="SGUseYn">
			<isEqual property="SGUseYn" compareValue="Y">	
			|| GRP_DATANO
			</isEqual>
		</isNotEmpty>
		
		<isNotEmpty property="SCUseYn">
			<isEqual property="SCUseYn" compareValue="Y">	
			|| CLS_DATANO
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="SIUseYn">
			<isEqual property="SIUseYn" compareValue="Y">	
			|| ITM_DATANO || DTADVS_CD
			</isEqual>
		</isNotEmpty>
			AS "sheetKey"
		<isNotEmpty property="STUseYn">
			<isEqual property="STUseYn" compareValue="Y">	 	<!-- 시계열 사용 할 경우 -->
			, WRTTIME_IDTFR_ID		AS "wrttimeId"
			, MAX(WRTTIME_IDTFR_NM)	AS "wrttimeNm"
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="SGUseYn">
			<isEqual property="SGUseYn" compareValue="Y">		<!-- 그룹 사용 할 경우 -->
			, GRP_DATANO 				AS "grpDatano"
			, MAX(GRP_FULLNM) 		AS "grpFullnm"
			, MAX(GRP_LEVEL) 			AS "grpLevel"
			, MAX(GRP_ORDER) 			AS "grpOrder"
			, MAX(GRP_FULL_CMMT_IDTFR) 	AS "grpFullCmmtIdtfr"
		</isEqual>	
		</isNotEmpty>
		<isNotEmpty property="SCUseYn">
			<isEqual property="SCUseYn" compareValue="Y">		<!-- 분류 사용 할 경우 -->
			, CLS_DATANO 				AS "clsDatano"
			, MAX(CLS_FULLNM) 		AS "clsFullnm"
			, MAX(CLS_LEVEL) 			AS "clsLevel"
			, MAX(CLS_ORDER) 			AS "clsOrder"
			, MAX(CLS_FULL_CMMT_IDTFR) 	AS "clsFullCmmtIdtfr"
		</isEqual>	
		</isNotEmpty>
		<isNotEmpty property="SIUseYn">
			<isEqual property="SIUseYn" compareValue="Y">		<!-- 항목 사용 할 경우 -->
			, ITM_DATANO 				AS "itmDatano"
			, MAX(ITM_FULLNM) 		AS "itmFullnm"
			, MAX(ITM_LEVEL) 			AS "itmLevel"
			, MAX(UI_ID) 					AS "uiId"
			, MAX(UI_NM) 					AS "uiNm"
			, MAX(ITM_ORDER) 			AS "itmOrder"		
			, DTADVS_CD					AS "dtadvsCd"
			, MAX(DTADVS_NM) 			AS "dtadvsNm"
			, MAX(DTADVS_ORDER) 			AS "dtadvsOrder"	
			, MAX(ITM_FULL_CMMT_IDTFR)	AS "itmFullCmmtIdtfr"
			</isEqual>
		</isNotEmpty>	
			, MAX(MAX_CLS_LEVEL)	AS "maxClsLevel"
			, MAX(MAX_ITM_LEVEL)	AS "maxItmLevel" 
			, MAX(MAX_GRP_LEVEL)	AS "maxGrpLevel" 
			, MAX(WRTTIME_CMMT_IDTFR) 	AS "wrttimeCmtIdtfr"		
		FROM 
			TMP_STATTBL_ITM
		GROUP BY 
			STATBL_ID
		<isNotEmpty property="STUseYn">
			<isEqual property="STUseYn" compareValue="Y">			
			, WRTTIME_IDTFR_ID
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="SGUseYn">
			<isEqual property="SGUseYn" compareValue="Y">		
			, GRP_DATANO 
			</isEqual>
		</isNotEmpty>		
		<isNotEmpty property="SCUseYn">
			<isEqual property="SCUseYn" compareValue="Y">		
			, CLS_DATANO 
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="SIUseYn">
			<isEqual property="SIUseYn" compareValue="Y">		
			, ITM_DATANO 
			, DTADVS_CD
			</isEqual>
		</isNotEmpty>
		
		ORDER BY
			"statblId"
		<isNotEmpty property="STUseYn">
			<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
				<isEqual property="STUseYn" compareValue="Y">
					<isEqual property="wrttimeOrder" compareValue="A">			
						, "wrttimeId"
					</isEqual>
					<isEqual property="wrttimeOrder" compareValue="D">
						, "wrttimeId" DESC
					</isEqual>	
				</isEqual>
			</isNotEqual>
		</isNotEmpty>
		<isNotEmpty property="SGUseYn">
			<isEqual property="SGUseYn" compareValue="Y">			
			, "grpOrder" 
			</isEqual>
		</isNotEmpty>		
		<isNotEmpty property="SCUseYn">
			<isEqual property="SCUseYn" compareValue="Y">			
			, "clsOrder" 
			</isEqual>
		</isNotEmpty>
		<isNotEmpty property="SIUseYn">
			<isEqual property="SIUseYn" compareValue="Y">	
			, "itmOrder"
			, "dtadvsOrder"
			</isEqual>
		</isNotEmpty>
		<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
			<isEqual property="wrttimeOrder" compareValue="A">			
			, "wrttimeId"
			</isEqual>
			<isEqual property="wrttimeOrder" compareValue="D">
			, "wrttimeId" DESC
			</isEqual>	
		</isEqual>
    </select>
    
    <!-- 통계표 시계열/분류/항목/그룹 위치 조회 -->
	<select id="statListDao.selectStatTblOptLocation" parameterClass="params" resultClass="java.util.HashMap">
		SELECT 
			NVL(MAX(DECODE(OPT_CD, 'ST', OPT_VAL, '')), 'N') 	AS "STOptVal"
			, NVL(MAX(DECODE(OPT_CD, 'SI', OPT_VAL, '')), 'N')	AS "SIOptVal"
			, CASE WHEN COUNT(C.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SC', OPT_VAL, '')), 'N')
				ELSE 'N'
			END AS "SCOptVal"
			, CASE WHEN COUNT(G.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SG', OPT_VAL, '') ), 'N') 
				ELSE 'N' 
			END AS "SGOptVal"
		FROM
			TB_STTS_TBL_OPT A
			INNER JOIN TB_COMM_CODE B
				ON  A.OPT_CD = B.DITC_CD
				AND B.GRP_CD = 'S1101' 
				AND B.REF_CD = 'S1106'
				AND B.USE_YN = 'Y'
				AND B.DITC_CD in ('ST', 'SG', 'SC','SI')
			LEFT OUTER JOIN TB_STTS_TBL_ITM C
				ON  A.STATBL_ID = C.STATBL_ID
				AND C.ITM_TAG = 'C'
				AND C.USE_YN = 'Y'
				AND C.DUMMY_YN = 'N'	
			LEFT OUTER JOIN TB_STTS_TBL_ITM G
				ON  A.STATBL_ID = G.STATBL_ID
				AND G.ITM_TAG = 'G'
				AND G.USE_YN = 'Y'
				AND G.DUMMY_YN = 'N'
		WHERE
			A.STATBL_ID = #statblId:VARCHAR#
			AND A.USE_YN = 'Y'
	</select>
	
	<!-- 통계 데이터셋 연계정보 조회 -->
	<select id="statListDao.selectStatInputDscn" parameterClass="params" resultClass="java.util.HashMap">
		SELECT 
			DSCN_ID			AS "dscnId"
			, DSCN_NM		AS "dscnNm"
			, DSCNTY_CD		AS "dscntyCd"
			, OWNER_CD		AS "ownerCd"
			, DS_ID			AS "dsId"
		FROM
			TB_STTS_DSCN
		WHERE
			USE_YN = 'Y'	
		AND DSCN_ID = ( SELECT DSCN_ID 
					    FROM   TB_STTS_TBL
					    WHERE  STATBL_ID = #statblId:VARCHAR#)	
	</select>
	
	<!-- 시트 데이터 조회 -->    
    <select id="statListDao.selectStatSheetData" remapResults="true"  parameterClass="params" resultClass="record">
		/* statListDao.selectStatSheetData */
		WITH TMP_STTSDATA AS
		(
			SELECT 
				COUNT(*) OVER() 		AS STTS_TOT_CNT
				, D.STATBL_ID			AS STATBL_ID
			<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
				, D.WRTTIME_IDTFR_ID	AS WRTTIME_IDTFR_ID
			</isNotEqual>
			<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
				, SUBSTR(D.WRTTIME_IDTFR_ID, 1, 4)	AS WRTTIME_IDTFR_ID
				, SUBSTR(D.WRTTIME_IDTFR_ID, 5, 2)	AS IDTFR	
			</isEqual>	
				, D.CLS_DATANO
				, D.ITM_DATANO
				, D.GRP_DATANO
				, I.SUMAVG_YN 	AS I_SUMAVG_YN
				, NVL(C.SUMAVG_YN, 'N') AS C_SUMAVG_YN
				, NVL(G.SUMAVG_YN, 'N') AS G_SUMAVG_YN
				, D.DTADVS_CD
				, D.WRTSTATE_CD
				, FN_GET_CMMT_IDTFR(D.CMMT_IDTFR) AS CMMT_IDTFR
				, O.SI_OPT_VAL
				, I.DMPOINT_CD
				, (CASE  WHEN D.DTA_SVAL IS NOT NULL THEN D.DTA_SVAL
				   ELSE 
						(CASE WHEN (I.GRP_UI_ID = U.GRP_UI_ID AND I.UI_ID != U.UI_ID)  THEN 
					 			FN_GET_DMPOINT(D.DTA_VAL * I.UI_CVSN_VAL / FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_CVSN_VAL', U.UI_CVSN_VAL), NVL(#dmPointVal:VARCHAR#, I.DMPOINT_CD))	
							ELSE 
					 			FN_GET_DMPOINT(D.DTA_VAL, NVL(#dmPointVal:VARCHAR#, I.DMPOINT_CD))	
						END)
					END)  AS DTA_VAL					
	            , CASE WHEN D.DTA_SVAL IS NOT NULL THEN 0 ELSE D.DTA_VAL END AS OLD_DTA_VAL   
				, (CASE WHEN (I.GRP_UI_ID = U.GRP_UI_ID AND I.UI_ID != U.UI_ID) THEN
					FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_NM', U.UI_NM)
				 	    ELSE 
				 			FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_NM', I.UI_NM)
					END) AS UI_NM
			<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->	
				, 'COL_' || DECODE(ST_OPT_VAL, 'H', WRTTIME_IDTFR_ID) || DECODE(SG_OPT_VAL, 'H', GRP_DATANO) || DECODE(SC_OPT_VAL, 'H', CLS_DATANO) || DECODE(SI_OPT_VAL, 'H', ITM_DATANO||D.DTADVS_CD) AS H_KEY
				, 'ROW_' || DECODE(ST_OPT_VAL, 'L', WRTTIME_IDTFR_ID) || DECODE(SG_OPT_VAL, 'L', GRP_DATANO) || DECODE(SC_OPT_VAL, 'L', CLS_DATANO) || DECODE(SI_OPT_VAL, 'L', ITM_DATANO||D.DTADVS_CD) AS L_KEY
			</isNotEqual>	
			<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
				, 'COL_' || SUBSTR(D.WRTTIME_IDTFR_ID, 5, 2) AS H_KEY
				, 'ROW_' || SUBSTR(WRTTIME_IDTFR_ID, 1, 4) || DECODE(SG_OPT_VAL, 'L', GRP_DATANO) || DECODE(SC_OPT_VAL, 'L', CLS_DATANO) || DECODE(SI_OPT_VAL, 'L', ITM_DATANO||D.DTADVS_CD) AS L_KEY
			</isEqual>
			FROM 
				TB_STTSDATA_01 D 
				INNER JOIN TV_STTS_TBL_ITM I
					ON D.STATBL_ID = I.STATBL_ID 
					AND D.ITM_DATANO = I.DATANO 
					AND I.ITM_TAG = 'I' 
					AND I.DUMMY_YN = 'N'
					AND I.USE_YN = 'Y'
				LEFT OUTER JOIN TV_STTS_TBL_ITM C 
					ON D.STATBL_ID = C.STATBL_ID 
					AND D.CLS_DATANO = C.DATANO 
					AND C.ITM_TAG = 'C'
					AND C.USE_YN = 'Y'	
				LEFT OUTER JOIN TV_STTS_TBL_ITM G
    				ON D.STATBL_ID = G.STATBL_ID
					AND D.CLS_DATANO = G.DATANO
					AND G.ITM_TAG = 'G'
					AND G.USE_YN = 'Y' 
				LEFT OUTER JOIN TB_STTS_STDDUI U
					ON  U.GRP_UI_ID = I.GRP_UI_ID 
	    	 	<isEmpty property="uiChgVal">		<!-- 단위 변환 default -->
	    	 		AND U.UI_ID = I.UI_ID
	    	 	</isEmpty>
	    	 	<isNotEmpty property="uiChgVal">	<!-- 단위 변환 시 -->
	    	 		AND U.UI_ID = #uiChgVal:VARCHAR#
	    	 	</isNotEmpty>		        
			    CROSS JOIN 
			    (
			    <isEmpty property="viewLocOpt">					<!-- 보기옵션 default(기본보기) -->
					SELECT 
						NVL(MAX(DECODE(OPT_CD, 'ST', OPT_VAL, '')), 'N') 	AS ST_OPT_VAL
						, NVL(MAX(DECODE(OPT_CD, 'SI', OPT_VAL, '')), 'N')	AS SI_OPT_VAL
						, CASE WHEN COUNT(C.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SC', OPT_VAL, '')), 'N')
							ELSE 'N'
						END AS SC_OPT_VAL
						, CASE WHEN COUNT(G.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SG', OPT_VAL, '') ), 'N') 
							ELSE 'N' 
						END AS SG_OPT_VAL
					FROM
						TB_STTS_TBL_OPT A
						INNER JOIN TB_COMM_CODE B
							ON  A.OPT_CD = B.DITC_CD
							AND B.GRP_CD = 'S1101' 
							AND B.REF_CD = 'S1106'
							AND B.USE_YN = 'Y'
						LEFT OUTER JOIN TB_STTS_TBL_ITM C
							ON  A.STATBL_ID = C.STATBL_ID
							AND C.ITM_TAG = 'C'
							AND C.USE_YN = 'Y'
							AND C.DUMMY_YN = 'N'	
						LEFT OUTER JOIN TB_STTS_TBL_ITM G
							ON  A.STATBL_ID = G.STATBL_ID
							AND G.ITM_TAG = 'G'
							AND G.USE_YN = 'Y'
							AND G.DUMMY_YN = 'N'	
					WHERE
						A.STATBL_ID = #statblId:VARCHAR#
						AND A.USE_YN = 'Y'		    
			    </isEmpty>
			    <isEqual property="viewLocOpt" compareValue="B">	<!-- 보기옵션 기본 보기 -->
					SELECT 
						NVL(MAX(DECODE(OPT_CD, 'ST', OPT_VAL, '')), 'N') 	AS ST_OPT_VAL
						, NVL(MAX(DECODE(OPT_CD, 'SI', OPT_VAL, '')), 'N')	AS SI_OPT_VAL
						, CASE WHEN COUNT(C.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SC', OPT_VAL, '')), 'N')
							ELSE 'N'
						END AS SC_OPT_VAL
						, CASE WHEN COUNT(G.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SG', OPT_VAL, '') ), 'N') 
							ELSE 'N' 
						END AS SG_OPT_VAL
					FROM
						TB_STTS_TBL_OPT A
						INNER JOIN TB_COMM_CODE B
							ON  A.OPT_CD = B.DITC_CD
							AND B.GRP_CD = 'S1101' 
							AND B.REF_CD = 'S1106'
							AND B.USE_YN = 'Y'
						LEFT OUTER JOIN TB_STTS_TBL_ITM C
							ON  A.STATBL_ID = C.STATBL_ID
							AND C.ITM_TAG = 'C'
							AND C.USE_YN = 'Y'
							AND C.DUMMY_YN = 'N'	
						LEFT OUTER JOIN TB_STTS_TBL_ITM G
							ON  A.STATBL_ID = G.STATBL_ID
							AND G.ITM_TAG = 'G'
							AND G.USE_YN = 'Y'
							AND G.DUMMY_YN = 'N'	
					WHERE
						A.STATBL_ID = #statblId:VARCHAR#
						AND A.USE_YN = 'Y'
				</isEqual>
				<isNotEqual property="viewLocOpt" compareValue="B">	<!-- 기본 보기 아닐 경우 -->
					SELECT #optST:VARCHAR# AS ST_OPT_VAL
						,  #optSC:VARCHAR# AS SC_OPT_VAL
						,  #optSI:VARCHAR# AS SI_OPT_VAL
						,  #optSG:VARCHAR# AS SG_OPT_VAL
					FROM	DUAL
				</isNotEqual>
			    ) O		        
			WHERE 
				D.STATBL_ID = #statblId:VARCHAR#
				AND D.DTACYCLE_CD = #dtacycleCd:VARCHAR#
				AND D.DTADVS_CD IN 
				<isEmpty property="iterDtadvsVal">	<!-- 통계자료유형 default(통계표 설정된 대로 조회) -->
				( 'OD' )	
				</isEmpty>
				<isNotEmpty property="iterDtadvsVal">	<!-- 통계자료유형 선택된 항목 조회 -->
	            	<iterate property="iterDtadvsVal" open="(" close=")" conjunction=", ">
	            		#iterDtadvsVal[]#
	            	</iterate>
	            </isNotEmpty>
				AND (C.DUMMY_YN = 'N' OR C.DUMMY_YN IS NULL)
				AND (G.DUMMY_YN = 'N' OR G.DUMMY_YN IS NULL)
			<isNotEmpty property="iterChkItms">	<!-- 선택한 항목 in 조회 -->
	         	<iterate property="iterChkItms" prepend="AND D.ITM_DATANO IN " open="(" close=")" conjunction=", ">
	         		#iterChkItms[]#
	         	</iterate>
	        </isNotEmpty>
			<isNotEmpty property="iterChkClss">	<!-- 선택한 분류 in 조회 -->
	         	<iterate property="iterChkClss" prepend="AND D.CLS_DATANO IN " open="(" close=")" conjunction=", ">
	         		#iterChkClss[]#
	         	</iterate>
	        </isNotEmpty>	        
			<isNotEmpty property="iterChkGrps">	<!-- 선택한 그룹 in 조회 -->
	         	<iterate property="iterChkGrps" prepend="AND D.GRP_DATANO IN " open="(" close=")" conjunction=", ">
	         		#iterChkGrps[]#
	         	</iterate>
	        </isNotEmpty>	    
				AND D.WRTTIME_IDTFR_ID IN (
						SELECT	WRTTIME_IDTFR_ID
						FROM (
                          		SELECT WRTTIME_IDTFR_ID
                                   , ROW_NUMBER() OVER(ORDER BY WRTTIME_IDTFR_ID DESC) AS RN
                          		  FROM TB_STTS_TBL_DIF
                          		 WHERE  STATBL_ID = #statblId:VARCHAR#
                          		   AND DTACYCLE_CD = #dtacycleCd:VARCHAR#
                          		   AND WRTSTATE_CD = 'AC'
                          		   <isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
                          		   		AND WRTTIME_IDTFR_ID BETWEEN CONCAT(#wrttimeStartYear:VARCHAR#, #wrttimeStartQt:VARCHAR#) AND CONCAT(#wrttimeEndYear:VARCHAR#, #wrttimeEndQt:VARCHAR#)
                          		   </isEqual>
                  		   		   <isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
                         		   		AND WRTTIME_IDTFR_ID BETWEEN CONCAT(#wrttimeMinYear:VARCHAR#, #wrttimeMinQt:VARCHAR#) AND CONCAT(#wrttimeMaxYear:VARCHAR#, #wrttimeMaxQt:VARCHAR#)
                         		   </isEqual>
						)
						<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
						<![CDATA[
						WHERE  RN <= #wrttimeLastestVal:NUMERIC#
						]]>
						</isEqual>
					)	
				AND D.WRTTIME_IDTFR_ID BETWEEN NVL(I.ITM_START_YM , '190000')  AND NVL(I.ITM_END_YM , '999912')
				AND D.WRTTIME_IDTFR_ID BETWEEN NVL(C.ITM_START_YM , '190000') AND NVL(C.ITM_END_YM , '999912')
				AND D.WRTTIME_IDTFR_ID BETWEEN NVL(G.ITM_START_YM , '190000') AND NVL(G.ITM_END_YM , '999912')
		)
		SELECT
			0 		 				AS "gId"
			, STATBL_ID				AS "statblId"
			, WRTTIME_IDTFR_ID		AS "wrttimeIdtfrId"
			<isEqual property="viewLocOpt" compareValue="T">
			, IDTFR					AS "idtfr"
			</isEqual>
			, GRP_DATANO			AS "grpDatano"
			, CLS_DATANO			AS "clsDatano"
			, ITM_DATANO			AS "itmDatano"
			, DTADVS_CD				AS "dtadvsCd"
			, WRTSTATE_CD			AS "wrtstateCd"
			, CMMT_IDTFR 			AS "cmmtIdtfr"
			, DTA_VAL 				AS "dtaVal"
			, UI_NM					AS "uiNm"
			, H_KEY					AS "hKey"
			, L_KEY					AS "lKey"
		FROM  TMP_STTSDATA
		<!-- 데이터 합계 구한다. -->
		<isNotEqual property="defViewOptionTSSumLoc" compareValue="N">		<!-- 시계열 출력하는 경우 -->
			<isNotEmpty property="dataSumGroup">
			UNION ALL	
			SELECT 
				1 AS "gId"
				, STATBL_ID
				<isEqual property="dataSumGroup" compareValue="I">
					, '00' 	AS WRTTIME_IDTFR_ID
					, 00 	AS GRP_DATANO
					, 00 	AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IT">
					, WRTTIME_IDTFR_ID
					, 00	AS GRP_DATANO
					, 00	AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IC">
					, '00' AS WRTTIME_IDTFR_ID
					, 00	AS GRP_DATANO
					, CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IG">
					, '' 	AS WRTTIME_IDTFR_ID
					, GRP_DATANO
					, 00 	AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITC">
					, WRTTIME_IDTFR_ID
					, 00   AS GRP_DATANO
					, CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITG">
					, WRTTIME_IDTFR_ID
					, GRP_DATANO
					, 00 AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ICG">
					, '' AS WRTTIME_IDTFR_ID
					, GRP_DATANO
					, CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITCG">
					, WRTTIME_IDTFR_ID
					, GRP_DATANO
					, CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				, '' AS WRTSTATE_CD
				, '' AS CMMT_IDTFR
				, FN_GET_DMPOINT(SUM( CASE WHEN  I_SUMAVG_YN = 'Y' THEN 0 ELSE OLD_DTA_VAL END ) , NVL(#dmPointVal:VARCHAR#, MAX(DMPOINT_CD) ))
				, MAX(UI_NM) AS UI_NM
				, CASE 
					WHEN MAX(SI_OPT_VAL) = 'H' THEN	MAX(H_KEY)
					WHEN MAX(SI_OPT_VAL) = 'L' THEN 	'itmSum'
					ELSE MAX(H_KEY)
				END H_KEY
				, CASE 
					WHEN MAX(SI_OPT_VAL) = 'H' THEN	'itmSum'
					WHEN MAX(SI_OPT_VAL) = 'L' THEN 	MAX(L_KEY)
					ELSE MAX(L_KEY)		
				END L_KEY
			FROM  TMP_STTSDATA
			WHERE I_SUMAVG_YN = 'N'
			AND   C_SUMAVG_YN = 'N'
			AND   G_SUMAVG_YN = 'N'
			GROUP BY
				STATBL_ID
				<isEqual property="dataSumGroup" compareValue="I">
				, ITM_DATANO
				, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IT">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IC">
				, ITM_DATANO
				, DTADVS_CD
				, CLS_DATANO
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IG">
				, ITM_DATANO
				, DTADVS_CD
				, GRP_DATANO
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITC">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				, CLS_DATANO
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITG">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				, GRP_DATANO
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ICG">
				, ITM_DATANO
				, DTADVS_CD
				, CLS_DATANO
				, GRP_DATANO
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITCG">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				, CLS_DATANO
				, GRP_DATANO
				</isEqual>
			ORDER BY "gId", "wrttimeIdtfrId"			
			</isNotEmpty>
		</isNotEqual>
    </select>
    
	<!-- 통계표 주석 리스트 조회 -->
	<select id="statListDao.selectStatCmmtList" parameterClass="params" resultClass="java.util.HashMap">
  		SELECT 
  			V_ORDER  						AS "order"
  			, FN_GET_CMMT_IDTFR(CMMT_IDTFR) AS "cmmtIdtfr"
            , STATBL_CMMT 					AS "cmmtCont"
            , CMMT_TAG 						AS "cmmtGubun"
   		FROM ( 
			SELECT 
				1 AS V_ORDER
		   		, CMMT_IDTFR 
		   		<isEmpty property="langGb">
		   		, STATBL_CMMT AS STATBL_CMMT
		   		</isEmpty>
		   		<isNotEmpty property="langGb">
		   		, ENG_STATBL_CMMT AS STATBL_CMMT
		   		</isNotEmpty>
		   		, 'TBL'  AS CMMT_TAG
			FROM  TB_STTS_TBL
			WHERE STATBL_ID = #statblId:VARCHAR#
			AND   USE_YN = 'Y'
		    UNION ALL
			SELECT 
				1 AS V_ORDER
		   		, CMMT_IDTFR 
		   		, CMMT_CONT
		   		, 'WRT'  AS CMMT_TAG
			FROM  TB_STTS_TBL_DIF
			WHERE STATBL_ID = #statblId:VARCHAR#
			AND WRTSTATE_CD = 'AC'
			AND CMMT_IDTFR IS NOT NULL
		    UNION ALL
			SELECT 
				1 AS V_ORDER
				, CMMT_IDTFR 
				<isEmpty property="langGb">
				, MAX(CMMT_CONT) AS CMMT_CONT
				</isEmpty>
				<isNotEmpty property="langGb">
				, MAX(ENG_CMMT_CONT) AS CMMT_CONT
				</isNotEmpty>
				, 'ITM' AS CMMT_TAG                         
			  FROM TB_STTS_TBL_ITM
			 WHERE STATBL_ID = #statblId:VARCHAR#
			 AND   USE_YN = 'Y'
			 AND   CMMT_IDTFR IS NOT NULL
			 GROUP BY  CMMT_IDTFR            
			UNION ALL
			SELECT 
				1 AS V_ORDER
				, CMMT_IDTFR
				<isEmpty property="langGb">
				, MAX(CMMT_CONT) AS CMMT_CONT
				</isEmpty>
				<isNotEmpty property="langGb">
				, MAX(ENG_CMMT_CONT) AS CMMT_CONT
				</isNotEmpty>
				, 'DATA' AS CMMT_TAG
			FROM  TB_STTSDATA_01
			WHERE STATBL_ID = #statblId:VARCHAR#
			AND   DTACYCLE_CD = #dtacycleCd:VARCHAR#
			AND   DTADVS_CD = 'OD'
            AND   WRTTIME_IDTFR_ID >= '190000'
			AND   WRTSTATE_CD = 'AC'
			AND   CMMT_IDTFR IS NOT NULL
			GROUP BY  CMMT_IDTFR    
			) A
		WHERE STATBL_CMMT IS NOT NULL	
		ORDER BY V_ORDER, TO_NUMBER( NVL(CMMT_IDTFR,0) ) 	
	</select>
	
	<!-- 통계 스크랩 마스터 정보 조회 -->
	<select id="statListDao.selectStatUserTbl" parameterClass="params" resultClass="record">
		SELECT 
			SIMMIX_TAG			AS "simmixTag"
			, STATBL_NM			AS "statblNm"
			, STATBL_EXP		AS "statblExp"
			, CALL_TAG			AS "callTag"
			, DTACYCLE_CD		AS "dtacycleCd"
			, SEARCH_TAG		AS "searchTag"
			, LATEST_CNT		AS "latestCnt"
			, SORT_TAG			AS "sortTag"
			, DD_TAG_CONT		AS "ddTagCont"
			, PIVOT_CD			AS "pivotCd"
			, PIVOT_DC_CD		AS "pivotDcCd"
			, PIVOT_ITM_CD		AS "pivotItmCd"
			, PIVOT_CLS_CD		AS "pivotClsCd"
			, PIVOT_GRP_CD		AS "pivotGrpCd"
			, UI_ID				AS "uiId"
			, DMPOINT_CD		AS "dmpointCd"
			, SYS_TAG			AS "sysTag"
			, START_WRTTIME_IDTFR_ID	AS "startWrttimeIdtfrId"
			, END_WRTTIME_IDTFR_ID		AS "endWrttimeIdtfrId"
			, LS_WRTTIME_IDTFR_ID		AS "lsWrttimeIdtfrId"
			, LE_WRTTIME_IDTFR_ID		AS "leWrttimeIdtfrId"
			, (SELECT DISTINCT STATBL_ID FROM TB_USER_TBL_ITM B 
			   WHERE B.SEQCE_NO = A.SEQCE_NO
			) AS "statblId"
		FROM 
			TB_USER_TBL A 	
		WHERE
			SEQCE_NO = #seqceNo:NUMERIC#
	</select>
	
	<!-- 통계 스크랩 항목 분류 정보 조회 -->
	<select id="statListDao.selectStatUserTblItm" parameterClass="params" resultClass="record">
		SELECT DATANO AS "datano"
		FROM   TB_USER_TBL_ITM
		WHERE  SEQCE_NO = #seqceNo:NUMERIC#
		AND    ITM_TAG = #itmTag:CHAR#
	</select>
	
	<!-- 통계스크랩 마스터 정보 등록 -->
	<insert id="statListDao.insertStatUserTbl" parameterClass="params">
		<selectKey keyProperty="seqceNo" resultClass="integer">
			SELECT SQ_USER_TBL_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TB_USER_TBL(
			SEQCE_NO
			, USER_CD
			, SIMMIX_TAG
			, STATBL_NM
			, STATBL_EXP
			, CALL_TAG
			, DTACYCLE_CD
			, SEARCH_TAG
			, START_WRTTIME_IDTFR_ID
			, END_WRTTIME_IDTFR_ID
			, LATEST_CNT
			, SORT_TAG
			, DD_TAG_CONT
			, PIVOT_CD
		<isEqual property="viewLocOpt" compareValue="U">	
			, PIVOT_DC_CD
			, PIVOT_ITM_CD
			, PIVOT_CLS_CD
			, PIVOT_GRP_CD
		</isEqual>
			, UI_ID
			, DMPOINT_CD
			, LS_WRTTIME_IDTFR_ID
			, LE_WRTTIME_IDTFR_ID
			, SYS_TAG
			, REG_DTTM
			, UPD_DTTM
		)
		VALUES(
			#seqceNo:NUMERIC#
			, #regId:NUMERIC#
			, 'S'
			, #statTitle:VARCHAR#
			, #statblExp:VARCHAR#
			, #callTag:CHAR#
			, #dtacycleCd:VARCHAR#
			, #wrttimeType:CHAR#
			, #wrtStartYmd:VARCHAR#
			, #wrtEndYmd:VARCHAR#
			, #wrttimeLastestVal:NUMERIC#
			, #wrttimeOrder:CHAR#
			, #dtadvsVal:VARCHAR#
			, #viewLocOpt:VARCHAR#
		<isEqual property="viewLocOpt" compareValue="U">
			, #optST:VARCHAR#
			, #optSI:VARCHAR#
			, #optSC:VARCHAR#
			, #optSG:VARCHAR#
		</isEqual>	
			, #uiChgVal:VARCHAR#
			, #dmPointVal:VARCHAR#
			, #lsWrttimeIdtfrId:VARCHAR#
			, #leWrttimeIdtfrId:VARCHAR#
			, 'K'
			, SYSDATE
			, SYSDATE
		)
	</insert>
	
	<!-- 통계스크랩 마스터 정보 수정-->
	<update id="statListDao.updateStatUserTbl" parameterClass="params">
		UPDATE TB_USER_TBL A
		SET
			STATBL_NM 					= #statTitle:VARCHAR#
			, STATBL_EXP 				= #statblExp:VARCHAR#
			, CALL_TAG 					= #callTag:CHAR#
			, DTACYCLE_CD 				= #dtacycleCd:CHAR#
			, SEARCH_TAG 				= #wrttimeType:CHAR#
			, START_WRTTIME_IDTFR_ID 	= #wrtStartYmd:CHAR#
			, END_WRTTIME_IDTFR_ID 		= #wrtEndYmd:CHAR#
			, LATEST_CNT 				= #wrttimeLastestVal:NUMERIC#
			, SORT_TAG 					= #wrttimeOrder:CHAR#
			, DD_TAG_CONT 				= #dtadvsVal:CHAR#
			, PIVOT_CD 					= #viewLocOpt:VARCHAR#
		<isEqual property="viewLocOpt" compareValue="U">	
			, PIVOT_DC_CD 				= #optST:VARCHAR#
			, PIVOT_ITM_CD 				= #optSI:VARCHAR#
			, PIVOT_CLS_CD 				= #optSC:VARCHAR#
			, PIVOT_GRP_CD 				= #optSG:VARCHAR#
		</isEqual>
			<![CDATA[
			, LS_WRTTIME_IDTFR_ID		= (CASE WHEN LS_WRTTIME_IDTFR_ID > #lsWrttimeIdtfrId:VARCHAR# THEN #lsWrttimeIdtfrId:VARCHAR# ELSE LS_WRTTIME_IDTFR_ID END)
			, LE_WRTTIME_IDTFR_ID		= (CASE WHEN LE_WRTTIME_IDTFR_ID < #leWrttimeIdtfrId:VARCHAR# THEN #leWrttimeIdtfrId:VARCHAR# ELSE LE_WRTTIME_IDTFR_ID END)
			]]>
			, UI_ID 					= #uiChgVal:VARCHAR#
			, DMPOINT_CD 				= #dmPointVal:VARCHAR#
			, UPD_DTTM 					= SYSDATE
		WHERE  SEQCE_NO = #seqceNo:NUMERIC#
	</update>
	
	<!-- 통계스크랩 항목, 분류 정보 등록 -->
	<insert id="statListDao.insertStatUserTblItm" parameterClass="params">
		INSERT INTO TB_USER_TBL_ITM
		(
			SEQCE_NO
			, STATBL_ID
			, DATANO
			, ITM_TAG
			, REG_DTTM
			, UPD_DTTM
		)
		<isNotEmpty property="iterChkVals">
			<iterate property="iterChkVals" conjunction="UNION ALL ">
			SELECT 
				#seqceNo:NUMERIC#
				, #statblId:VARCHAR#
				, #iterChkVals[]:NUMERIC#
				, #itmTag:CHAR#
				, SYSDATE
				, SYSDATE
			FROM DUAL
			</iterate>
		</isNotEmpty>
	</insert>	
	
	<!-- 통계스크랩 항목, 분류 정보 삭제 -->
	<delete id="statListDao.deleteStatUserTblItm" parameterClass="params">
		DELETE TB_USER_TBL_ITM
		WHERE  SEQCE_NO = #seqceNo:NUMERIC#
		AND    ITM_TAG = #itmTag:CHAR#
	</delete>
	
	<select id="statListDao.selectStatUserTblFirEndWrttime" parameterClass="params" resultClass="record">
		SELECT	MIN(WRTTIME_IDTFR_ID)	AS "lsWrttimeIdtfrId"
			  , MAX(WRTTIME_IDTFR_ID)	AS "leWrttimeIdtfrId"
		FROM 	
		(
			SELECT WRTTIME_IDTFR_ID
                 , ROW_NUMBER() OVER(ORDER BY WRTTIME_IDTFR_ID DESC) AS RN
              FROM TB_STTS_TBL_DIF
             WHERE  STATBL_ID = #statblId:VARCHAR#
                 AND WRTSTATE_CD = 'AC'
		)
		<![CDATA[
		WHERE  RN <= #wrttimeLastestVal:NUMERIC#
		]]>
	</select>
	
	<!-- 통계표 변환저장 로그기록(포털 파일 다운로드시 로그) -->
	<insert id="statListDao.insertLogSttsTblSave" parameterClass="params">
		<selectKey keyProperty="seqceNo" resultClass="integer">
			SELECT SQ_LOG_STTS_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TB_LOG_STTS_TBL_SAVE (
			SEQCE_NO
			, STATBL_ID
			, SYS_TAG
			, USER_CD
			, USER_IP
			, SAVE_EXT
			, REG_DTTM
		)
		VALUES (
			#seqceNo:NUMERIC#
			, #statblId:VARCHAR#
			, #sysTag:CHAR#
			, #userCd:NUMERIC#
			, #userIp:VARCHAR#
			, #saveExt:VARCHAR#
			, SYSDATE
		)
	</insert>
	
	<!-- 메타데이터 확인 로그 -->
	<insert id="statListDao.insertLogSttsStat" parameterClass="params">
		<selectKey keyProperty="seqceNo" resultClass="integer">
			SELECT SQ_LOG_STTS_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TB_LOG_STTS_STAT (
			SEQCE_NO
			, STAT_ID
			, STATBL_ID
			, SYS_TAG
			, USER_CD
			, USER_IP
			, REG_DTTM
		)
		VALUES (
			#seqceNo:NUMERIC#
			, #statId:VARCHAR#
			, #statblId:VARCHAR#
			, #sysTag:CHAR#
			, #userCd:NUMERIC#
			, #userIp:VARCHAR#
			, SYSDATE
		)
	</insert>	
	
	<!-- 통계표 열람 로그 -->
	<insert id="statListDao.insertLogSttsTbl" parameterClass="params">
		<selectKey keyProperty="seqceNo" resultClass="integer">
			SELECT SQ_LOG_STTS_SEQ.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO TB_LOG_STTS_TBL (
			SEQCE_NO
			, STATBL_ID
			, SIMMIX_TAG
			, SYS_TAG
			, USER_CD
			, USER_IP
			, REG_DTTM
		)
		VALUES (
			#seqceNo:NUMERIC#
			, #statblId:VARCHAR#
			, #simmixTag:CHAR#
			, #sysTag:CHAR#
			, #userCd:NUMERIC#
			, #userIp:VARCHAR#
			, SYSDATE
		)
	</insert>		
	
	<!--/////////////////////////// 통계표 이력 조회 관련 SQL [시작] ////////////////////////////////-->
	
	<!-- 통계표 이력 작성주기 검색 -->
	<select id="statListDao.selectStatHistDtacycleList" parameterClass="params" resultClass="record">
		SELECT 
			A.DITC_CD 	AS "code"
			, A.DITC_NM	AS "name"
		FROM
			TB_COMM_CODE A
				INNER JOIN (
					SELECT DISTINCT DTACYCLE_CD
					FROM   TB_HIS_STTS_CYCLE
					WHERE  STATBL_ID = #statblId:VARCHAR#
				) B
				ON  A.DITC_CD = B.DTACYCLE_CD
		WHERE
			A.GRP_CD = 'S1103'
		AND A.USE_YN = 'Y'
		ORDER BY V_ORDER	
	</select>	
	
	<!-- 통계표 이력 주기 리스트 조회 -->
	<select id="statListDao.selectStatHisSttsCycleList" parameterClass="params" resultClass="record">
		SELECT 
			HIS_CYCLE_NO 												AS "hisCycleNo"
			, A.DTACYCLE_CD												AS "dtacycleCd"
			, FN_GET_COMM_CODE_NM('S1103', A.DTACYCLE_CD) 				AS "dtacycleCdNm"
			, A.WRTTIME_IDTFR_ID 										AS "wrttimeIdtfrId"
			, FN_GET_WRTTIME_IDTFR_NM(#dtacycleCd:VARCHAR#, A.WRTTIME_IDTFR_ID) AS "wrttimeIdtfrIdNm"
			, TO_CHAR(A.REG_DTTM, 'YYYY/MM/DD')							AS "regDttm"
		FROM 
			TB_HIS_STTS_CYCLE A
		WHERE 
			STATBL_ID = #statblId:VARCHAR#
			AND DTACYCLE_CD = #dtacycleCd:VARCHAR#
			ORDER BY WRTTIME_IDTFR_ID	
	</select>	
	
	
	
	<!-- 통계표 이력 시트 데이터 조회 -->    
    <select id="statListDao.selectStatHistSheetData" remapResults="true"  parameterClass="params" resultClass="record">
		/* statListDao.selectStatHistSheetData */
		WITH TMP_STTSDATA AS
		(
			SELECT 
				COUNT(*) OVER() 		AS STTS_TOT_CNT
				, D.STATBL_ID			AS STATBL_ID
			<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->
				, D.WRTTIME_IDTFR_ID	AS WRTTIME_IDTFR_ID
			</isNotEqual>
			<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
				, SUBSTR(D.WRTTIME_IDTFR_ID, 1, 4)	AS WRTTIME_IDTFR_ID
				, SUBSTR(D.WRTTIME_IDTFR_ID, 5, 2)	AS IDTFR	
			</isEqual>	
				, D.CLS_DATANO
				, D.ITM_DATANO
				, C.SUMAVG_YN 	AS I_SUMAVG_YN
				, NVL(C2.SUMAVG_YN, 'N') AS C_SUMAVG_YN
				, D.DTADVS_CD
				, D.WRTSTATE_CD
				, FN_GET_CMMT_IDTFR(D.CMMT_IDTFR) AS CMMT_IDTFR
				, SI_OPT_VAL
				, (CASE  WHEN D.DTA_SVAL IS NOT NULL THEN D.DTA_SVAL
				   ELSE 
						(CASE WHEN (C.GRP_UI_ID = U.GRP_UI_ID AND C.UI_ID != U.UI_ID AND C.GRP_UI_ID = FN_GET_DTADVS_UI (D.DTADVS_CD,   'UI_GRP_ID', C.GRP_UI_ID))  THEN 
					 			FN_GET_DMPOINT(D.DTA_VAL * C.UI_CVSN_VAL / FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_CVSN_VAL', U.UI_CVSN_VAL), #dmPointVal:VARCHAR#)	
							ELSE 
					 			FN_GET_DMPOINT(D.DTA_VAL, #dmPointVal:VARCHAR#)	
						END)
					END)  AS DTA_VAL
				, CASE WHEN D.DTA_SVAL IS NOT NULL THEN 0 ELSE D.DTA_VAL END AS DTA_VAL_OLD
				, (CASE WHEN C.GRP_UI_ID = U.GRP_UI_ID AND C.UI_ID != U.UI_ID AND C.GRP_UI_ID = FN_GET_DTADVS_UI (D.DTADVS_CD,   'UI_GRP_ID', C.GRP_UI_ID) THEN
					FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_NM', U.UI_NM)
				 	    ELSE 
				 			FN_GET_DTADVS_UI(D.DTADVS_CD, 'UI_NM', C.UI_NM)
					END) AS UI_NM
			<isNotEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기가 아닐 경우 -->	
				, 'COL_' || DECODE(ST_OPT_VAL, 'H', WRTTIME_IDTFR_ID) || DECODE(SC_OPT_VAL, 'H', CLS_DATANO) || DECODE(SI_OPT_VAL, 'H', ITM_DATANO||D.DTADVS_CD) AS H_KEY
				, 'ROW_' || DECODE(ST_OPT_VAL, 'L', WRTTIME_IDTFR_ID) || DECODE(SC_OPT_VAL, 'L', CLS_DATANO) || DECODE(SI_OPT_VAL, 'L', ITM_DATANO||D.DTADVS_CD) AS L_KEY
			</isNotEqual>	
			<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기형식이 표로 보기일 경우 -->
				<!-- , 'COL_' || SUBSTR(D.WRTTIME_IDTFR_ID, 1, 4) AS H_KEY -->
				<!-- , 'ROW_' || DECODE(ST_OPT_VAL, 'L', WRTTIME_IDTFR_ID) || DECODE(SC_OPT_VAL, 'L', CLS_DATANO) || DECODE(SI_OPT_VAL, 'L', ITM_DATANO||D.DTADVS_CD) || SUBSTR(D.WRTTIME_IDTFR_ID, 5, 2) AS L_KEY -->
				<!-- 171121 김정호-표로 보기시 주기가 위로 위치되도록 수정 -->
				, 'COL_' || SUBSTR(D.WRTTIME_IDTFR_ID, 5, 2) AS H_KEY
				, 'ROW_' || DECODE(ST_OPT_VAL, 'L', SUBSTR(WRTTIME_IDTFR_ID, 1, 4)) || DECODE(SC_OPT_VAL, 'L', CLS_DATANO) || DECODE(SI_OPT_VAL, 'L', ITM_DATANO||D.DTADVS_CD) AS L_KEY
			</isEqual>
			FROM 
				TB_HIS_STTSDATA_CYCLE D 
				INNER JOIN TV_STTS_TBL_ITM C
					ON D.STATBL_ID = C.STATBL_ID 
					AND D.ITM_DATANO = C.DATANO 
					AND C.ITM_TAG = 'I' 
					AND C.DUMMY_YN = 'N'
					AND C.USE_YN = 'Y'
				LEFT OUTER JOIN TV_STTS_TBL_ITM C2 
					ON D.STATBL_ID = C2.STATBL_ID 
					AND D.CLS_DATANO = C2.DATANO 
					AND C2.ITM_TAG = 'C'
					AND C2.USE_YN = 'Y'	
				LEFT OUTER JOIN TB_STTS_STDDUI U
					ON  U.GRP_UI_ID = C.GRP_UI_ID 
	    	 	<isEmpty property="uiChgVal">		<!-- 단위 변환 default -->
	    	 		AND U.UI_ID = C.UI_ID
	    	 	</isEmpty>
	    	 	<isNotEmpty property="uiChgVal">	<!-- 단위 변환 시 -->
	    	 		AND U.UI_ID = #uiChgVal#
	    	 	</isNotEmpty>		        
			    CROSS JOIN 
			    (
			    <isEmpty property="viewLocOpt">					<!-- 보기옵션 default(기본보기) -->
					SELECT 
						NVL(MAX(DECODE(OPT_CD, 'ST', OPT_VAL, '')), 'N') 	AS ST_OPT_VAL
						, NVL(MAX(DECODE(OPT_CD, 'SI', OPT_VAL, '')), 'N')	AS SI_OPT_VAL
						, CASE WHEN COUNT(C.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SC', OPT_VAL, '')), 'N')
							ELSE 'N'
						END AS SC_OPT_VAL
						, CASE WHEN COUNT(G.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SG', OPT_VAL, '') ), 'N') 
							ELSE 'N' 
						END AS SG_OPT_VAL
					FROM
						TB_STTS_TBL_OPT A
						INNER JOIN TB_COMM_CODE B
							ON  A.OPT_CD = B.DITC_CD
							AND B.GRP_CD = 'S1101' 
							AND B.REF_CD = 'S1106'
							AND B.USE_YN = 'Y'
						LEFT OUTER JOIN TB_STTS_TBL_ITM C
							ON  A.STATBL_ID = C.STATBL_ID
							AND C.ITM_TAG = 'C'
							AND C.USE_YN = 'Y'
							AND C.DUMMY_YN = 'N'	
						LEFT OUTER JOIN TB_STTS_TBL_ITM G
							ON  A.STATBL_ID = G.STATBL_ID
							AND G.ITM_TAG = 'G'
							AND G.USE_YN = 'Y'
							AND G.DUMMY_YN = 'N'	
					WHERE
						A.STATBL_ID = #statblId:VARCHAR#
						AND A.USE_YN = 'Y'		    
			    </isEmpty>
			    <isEqual property="viewLocOpt" compareValue="B">	<!-- 보기옵션 기본 보기 -->
					SELECT 
						NVL(MAX(DECODE(OPT_CD, 'ST', OPT_VAL, '')), 'N') 	AS ST_OPT_VAL
						, NVL(MAX(DECODE(OPT_CD, 'SI', OPT_VAL, '')), 'N')	AS SI_OPT_VAL
						, CASE WHEN COUNT(C.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SC', OPT_VAL, '')), 'N')
							ELSE 'N'
						END AS SC_OPT_VAL
						, CASE WHEN COUNT(G.DATANO) > 0 THEN NVL(MAX(DECODE(OPT_CD, 'SG', OPT_VAL, '') ), 'N') 
							ELSE 'N' 
						END AS SG_OPT_VAL
					FROM
						TB_STTS_TBL_OPT A
						INNER JOIN TB_COMM_CODE B
							ON  A.OPT_CD = B.DITC_CD
							AND B.GRP_CD = 'S1101' 
							AND B.REF_CD = 'S1106'
							AND B.USE_YN = 'Y'
						LEFT OUTER JOIN TB_STTS_TBL_ITM C
							ON  A.STATBL_ID = C.STATBL_ID
							AND C.ITM_TAG = 'C'
							AND C.USE_YN = 'Y'
							AND C.DUMMY_YN = 'N'	
						LEFT OUTER JOIN TB_STTS_TBL_ITM G
							ON  A.STATBL_ID = G.STATBL_ID
							AND G.ITM_TAG = 'G'
							AND G.USE_YN = 'Y'
							AND G.DUMMY_YN = 'N'	
					WHERE
						A.STATBL_ID = #statblId:VARCHAR#
						AND A.USE_YN = 'Y'
				</isEqual>
				<isNotEqual property="viewLocOpt" compareValue="B">	<!-- 기본 보기 아닐 경우 -->
					SELECT #optST:VARCHAR# AS ST_OPT_VAL
						,  #optSC:VARCHAR# AS SC_OPT_VAL
						,  #optSI:VARCHAR# AS SI_OPT_VAL
						,  #optSG:VARCHAR# AS SG_OPT_VAL
					FROM	DUAL
				</isNotEqual>
			    ) O		        
			WHERE 
				D.STATBL_ID = #statblId:VARCHAR#
				AND D.HIS_CYCLE_NO = #hisCycleNo:NUMERIC#
				AND D.DTACYCLE_CD = #dtacycleCd:VARCHAR#
				AND (C2.DUMMY_YN = 'N' OR C2.DUMMY_YN IS NULL)
			<isNotEmpty property="iterChkItms">	<!-- 선택한 항목 in 조회 -->
	         	<iterate property="iterChkItms" prepend="AND D.ITM_DATANO IN " open="(" close=")" conjunction=", ">
	         		#iterChkItms[]#
	         	</iterate>
	        </isNotEmpty>
			<isNotEmpty property="iterChkClss">	<!-- 선택한 분류 in 조회 -->
	         	<iterate property="iterChkClss" prepend="AND D.CLS_DATANO IN " open="(" close=")" conjunction=", ">
	         		#iterChkClss[]#
	         	</iterate>
	        </isNotEmpty>	        	
			<isEqual property="wrttimeType" compareValue="B">	<!-- 주기가 기간 검색인 경우 -->
				AND D.WRTTIME_IDTFR_ID BETWEEN CONCAT(#wrttimeStartYear:VARCHAR#, #wrttimeStartQt:VARCHAR#) AND CONCAT(#wrttimeEndYear:VARCHAR#, #wrttimeEndQt:VARCHAR#)
				AND D.WRTTIME_IDTFR_ID IN ( SELECT DISTINCT WRTTIME_IDTFR_ID FROM TB_HIS_STTSDATA_CYCLE WHERE STATBL_ID = #statblId:VARCHAR# AND HIS_CYCLE_NO = #hisCycleNo:NUMERIC# AND WRTSTATE_CD = 'AC')
			</isEqual>
			<isEqual property="wrttimeType" compareValue="L">	<!-- 주기가 최근 시점인 경우 -->
				AND D.WRTTIME_IDTFR_ID IN
					(
						SELECT	WRTTIME_IDTFR_ID
						FROM	
						(
							<include refid="statListDao.selectStatHistTblItmWrttime" />    
			        		AND A.YEAR_CD || B.IDTFR in( 
			        						SELECT DISTINCT WRTTIME_IDTFR_ID
	                                  		  FROM TB_HIS_STTSDATA_CYCLE
	                                 	     WHERE STATBL_ID = #statblId:VARCHAR# 	
	                                 	       AND HIS_CYCLE_NO = #hisCycleNo:NUMERIC#
	                                   		   AND WRTSTATE_CD = 'AC')  
						)
						<![CDATA[
						WHERE  RN <= #wrttimeLastestVal:NUMERIC#
						]]>
					)
			</isEqual>
				
				AND D.DTADVS_CD IN 
				<isEmpty property="iterDtadvsVal">	<!-- 통계자료유형 default(통계표 설정된 대로 조회) -->
				( 'OD' )	
				</isEmpty>
				<isNotEmpty property="iterDtadvsVal">	<!-- 통계자료유형 선택된 항목 조회 -->
	            	<iterate property="iterDtadvsVal" open="(" close=")" conjunction=", ">
	            		#iterDtadvsVal[]#
	            	</iterate>
	            </isNotEmpty>
		)
		SELECT
			0 		 				AS "gId"
			, STATBL_ID				AS "statblId"
			, WRTTIME_IDTFR_ID		AS "wrttimeIdtfrId"
			<isEqual property="viewLocOpt" compareValue="T">
			, IDTFR					AS "idtfr"
			</isEqual>
			, CLS_DATANO			AS "clsDatano"
			, ITM_DATANO			AS "itmDatano"
			, DTADVS_CD				AS "dtadvsCd"
			, WRTSTATE_CD			AS "wrtstateCd"
			, CMMT_IDTFR 			AS "cmmtIdtfr"
			, DTA_VAL 				AS "dtaVal"
			, UI_NM					AS "uiNm"
			, H_KEY					AS "hKey"
			, L_KEY					AS "lKey"
		FROM  TMP_STTSDATA
		<!-- 데이터 합계 구한다. -->
		<isNotEqual property="defViewOptionTSSumLoc" compareValue="N">		<!-- 시계열 출력하는 경우 -->
			<isNotEmpty property="dataSumGroup">
			UNION ALL	
			SELECT 
				1 AS "gId"
				, STATBL_ID
				<isEqual property="dataSumGroup" compareValue="I">
					, '00' 	AS WRTTIME_IDTFR_ID
					, 00 	AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IT">
					, WRTTIME_IDTFR_ID
					, 00	AS CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IC">
					<isEqual property="viewLocOpt" compareValue="T">	<!-- 보기 옵션이 표로보기 인 경우 -->
						, '' AS WRTTIME_IDTFR_ID
						, IDTFR	
						, CLS_DATANO
						, ITM_DATANO
						, DTADVS_CD
					</isEqual>
					<isNotEqual property="viewLocOpt" compareValue="T">	
						, '00'	AS WRTTIME_IDTFR_ID
						, CLS_DATANO
						, ITM_DATANO
						, DTADVS_CD
					</isNotEqual>
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITC">
					, WRTTIME_IDTFR_ID
					, CLS_DATANO
					, ITM_DATANO
					, DTADVS_CD
				</isEqual>
				, '' AS WRTSTATE_CD
				, '' AS CMMT_IDTFR
				, FN_GET_DMPOINT(SUM( CASE WHEN  I_SUMAVG_YN = 'Y' THEN 0 ELSE DTA_VAL_OLD END ) , #dmPointVal:VARCHAR#)
				, MAX(UI_NM) AS UI_NM
				, CASE 
					WHEN MAX(SI_OPT_VAL) = 'H' THEN		MAX(H_KEY)
					WHEN MAX(SI_OPT_VAL) = 'L' THEN 	'itmSum'
					ELSE MAX(H_KEY)
				END H_KEY
				, CASE 
					WHEN MAX(SI_OPT_VAL) = 'H' THEN		'itmSum'
					WHEN MAX(SI_OPT_VAL) = 'L' THEN 	MAX(L_KEY)
					ELSE MAX(L_KEY)		
				END L_KEY
			FROM  TMP_STTSDATA
			WHERE I_SUMAVG_YN = 'N'
			AND   C_SUMAVG_YN = 'N'
			GROUP BY
				STATBL_ID
				<isEqual property="dataSumGroup" compareValue="I">
				, ITM_DATANO
				, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IT">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="IC">
					<isEqual property="viewLocOpt" compareValue="T">		<!-- 보기 옵션이 표로보기 인 경우 -->
						, IDTFR
						, ITM_DATANO
						, DTADVS_CD
						, CLS_DATANO
					</isEqual>
					<isNotEqual property="viewLocOpt" compareValue="T">
						, ITM_DATANO
						, DTADVS_CD
						, CLS_DATANO
					</isNotEqual>
				</isEqual>
				<isEqual property="dataSumGroup" compareValue="ITC">
				, WRTTIME_IDTFR_ID
				, ITM_DATANO
				, DTADVS_CD
				, CLS_DATANO
				</isEqual>
			ORDER BY "gId", "wrttimeIdtfrId"			
			</isNotEmpty>
		</isNotEqual>
    </select>

	<!-- 시계열(자료시점) 주석 식별자 -->
	<select id="statListDao.selectCmmtIdtfr" resultClass="java.lang.String">
		SELECT NVL(CMMT_IDTFR, '') AS "cmmtIdtfr"
  		  FROM TB_STTS_TBL_DIF 
 		 WHERE STATBL_ID = #statblId:VARCHAR#
       	   AND DTACYCLE_CD = #dtacycleCd:VARCHAR#
       	   AND WRTTIME_IDTFR_ID = #wrttimeId:VARCHAR#
       	   AND WRTSTATE_CD = 'AC'
	</select>
	
	<!-- 통계 연결 게시판 자료 데이터 호출 -->
	<select id="statListDao.selectContentsList" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectContentsList */
		SELECT B.BBS_CD, 
		       B.SEQ, 
		       B.P_SEQ, 
		       B.BBS_TIT, 
		       B.USER_ID, 
		       B.USER_NM, 
		       B.USER_DTTM, 
		       B.SECRET_YN, 
		       B.BBS_CONT, 
		       B.VIEW_CNT,
		       <![CDATA[
		       (CASE WHEN A.ANS_TAG <> 'N' THEN FN_GET_BBSANS_NM ( A.ANS_TAG, B.ANS_STATE) ELSE '' END) AS ANS_STATE,   
		       (CASE WHEN A.ANS_TAG <> 'N' THEN FN_GET_BBSANS_NM ( A.ANS_TAG, 'ZS') ELSE '' END) AS PROC_START_NM,
		       (CASE WHEN A.ANS_TAG <> 'N' THEN FN_GET_BBSANS_NM ( A.ANS_TAG, 'ZD') ELSE '' END) AS PROC_END_NM,
		       ]]>
		       B.ANS_CONT, 
		       B.DEPT_NM AS "ORG_NM", 
		       (CASE WHEN A.LIST_CD IS NOT NULL THEN FN_GET_BBS_LIST_CD_NM(A.LIST_CD) ELSE '' END) AS GRP_LIST_CD_NM  ,
		       (CASE WHEN A.LIST_CD IS NOT NULL THEN FN_GET_COMM_CODE_NM(A.LIST_CD,  B.LIST_SUB_CD) ELSE '' END) AS LIST_SUB_CD 
		  FROM TB_BBS_LIST B INNER JOIN TB_BBS_ADMIN A 
		    ON B.BBS_CD = A.BBS_CD
	      WHERE B.DEL_YN = 'N' 
	      	AND	B.BBS_CD = #bbsCd:VARCHAR#
		    AND B.SEQ = #seq:NUMERIC#
	</select>
	
	<!-- 통계설명 자료 파일 호출(파일다운로드 목록) -->
	<select id="statListDao.selectContentsFileList" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectContentsFileList */
		<isEqual property="paging" compareValue="0">
			SELECT AA.* 
			FROM   (SELECT ROWNUM AS ROW_NUM, AA.*
					FROM   (  
		</isEqual> 
						SELECT BBS_CD , 
					       SEQ , 
					       FILE_SEQ , 
					       FILE_SIZE , 
					       VIEW_FILE_NM , 
					       SRC_FILE_NM , 
					       SAVE_FILE_NM , 
					       FILE_EXT , 
					       TOP_YN , 
					       DEL_YN , 
					       REG_DTTM , 
					       FILE_CONT 
					  FROM TB_BBS_FILE 
					 WHERE DEL_YN = 'N'  
					       AND BBS_CD =#bbsCd:VARCHAR# 
					       AND SEQ = #seq:NUMERIC# 
					 <isNotEmpty property="searchWord">     
						 <isEmpty property="searchType">
							 	AND (
				                    UPPER(VIEW_FILE_NM)  LIKE '%'||UPPER(#searchWord#)||'%' OR
				                    UPPER(FILE_CONT) LIKE '%'||UPPER(#searchWord#)||'%'
				                )
						 </isEmpty> 
						
						 <isNotEmpty property="searchType">
				             <isEqual property="searchType" compareValue="viewFileNm">
				            		AND UPPER(VIEW_FILE_NM)      LIKE '%'||UPPER(#searchWord#)||'%'
				             </isEqual>
				             <isEqual property="searchType" compareValue="fileCont">
				            		AND UPPER(FILE_CONT)     LIKE '%'||UPPER(#searchWord#)||'%'
				             </isEqual>
			             </isNotEmpty>
					 </isNotEmpty>          
				     <isNotEmpty property="fileSeq">
					 	   AND FILE_SEQ = #fileSeq#
					 </isNotEmpty>
					ORDER BY REG_DTTM DESC, TOP_YN DESC, 
					       FILE_SEQ
	<isEqual property="paging" compareValue="0">
		<![CDATA[
				) AA
			WHERE ROWNUM <= #end:NUMERIC#
			) AA
		WHERE AA.ROW_NUM >= #start:NUMERIC#
		]]>
		</isEqual>			       
	</select>
	
	<!-- 통계설명 자료 파일 갯수 -->
	<select id="statListDao.selectContentsFileListCount" parameterClass="params" resultClass="int">
		/* sql id : statListDao.selectContentsFileListCount */
		 SELECT COUNT(*) 
		   FROM
				(SELECT BBS_CD , 
				       SEQ , 
				       FILE_SEQ , 
				       FILE_SIZE , 
				       VIEW_FILE_NM , 
				       SRC_FILE_NM , 
				       SAVE_FILE_NM , 
				       FILE_EXT , 
				       TOP_YN , 
				       DEL_YN , 
				       REG_DTTM , 
				       FILE_CONT 
				  FROM TB_BBS_FILE 
				 WHERE DEL_YN = 'N'  
			       AND BBS_CD =#bbsCd:VARCHAR# 
				   AND SEQ = #seq:NUMERIC#
				 <isNotEmpty property="searchWord">     
					 <isEmpty property="searchType">
						 	AND (
			                    UPPER(VIEW_FILE_NM)  LIKE '%'||UPPER(#searchWord#)||'%' OR
			                    UPPER(FILE_CONT) LIKE '%'||UPPER(#searchWord#)||'%'
			                )
					 </isEmpty> 
					
					 <isNotEmpty property="searchType">
			             <isEqual property="searchType" compareValue="viewFileNm">
			            		AND UPPER(VIEW_FILE_NM)      LIKE '%'||UPPER(#searchWord#)||'%'
			             </isEqual>
			             <isEqual property="searchType" compareValue="fileCont">
			            		AND UPPER(FILE_CONT)     LIKE '%'||UPPER(#searchWord#)||'%'
			             </isEqual>
		             </isNotEmpty>
				 </isNotEmpty>    
			     <isNotEmpty property="fileSeq">
				 	   AND FILE_SEQ = #fileSeq#
				 </isNotEmpty>
				ORDER BY TOP_YN DESC, 
				       FILE_SEQ)
	</select>

    <!-- 통계 연결 게시판 목록 상단 데이터 -->
    <select id="statListDao.selectContentsBbsListDataUpper" parameterClass="params" resultClass="record">
    	/* sql id : statListDao.selectContentsBbsListDataUpper */
		SELECT NULL											AS "rowNum"
			 , Z.BBS_CD										AS "bbsCd"
			 , Z.SEQ										AS "seq"
			 , Z.STATBL_ID									AS "statblId"
			 , Z.DEL_YN										AS "delYn"
			 , Z.TBL_LINK_TAG								AS "tblLinkTag"
			 , TO_CHAR(Z.REG_DTTM,'YYYY-MM-DD HH24:MI:SS') 	AS "regDttm"
			 , COUNT(*) OVER (ORDER BY Z.SEQ) 				AS "rowCnt"
			 , B.P_SEQ										AS "pSeq"
			 , B.BBS_TIT									AS "bbsTit"
			 , B.USER_ID									AS "userId"
			 , B.USER_NM									AS "userNm"
			 , B.USER_DTTM									AS "userDttm"
			 , B.BBS_CONT									AS "bbsCont"
			 , B.VIEW_CNT									AS "viewCnt"
			 , C.STATBL_NM									AS "statblNm"
			 , (CASE WHEN A.LIST_CD IS NOT NULL THEN FN_GET_COMM_CODE_NM(A.LIST_CD,  B.LIST_SUB_CD) ELSE '' END) AS "listSubCd"
		  FROM TB_BBS_TBL Z
   			INNER JOIN TB_BBS_LIST B ON Z.SEQ = B.SEQ 
   				<isNotEmpty property="searchWord">
   					<isEmpty property="searchType">
            		AND ( UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') OR UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') )
                    </isEmpty>
                    <isNotEmpty property="searchType">
	                    <isEqual property="searchType" compareValue="bbsTit">
	                    AND UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
	                    </isEqual>
	                    <isEqual property="searchType" compareValue="bbsCont">
	                    AND UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
	                    </isEqual>
                    </isNotEmpty>
                </isNotEmpty>
   			INNER JOIN TB_STTS_TBL C ON Z.STATBL_ID = C.STATBL_ID
   			INNER JOIN TB_BBS_ADMIN A ON B.BBS_CD = A.BBS_CD 
		 WHERE B.DEL_YN = 'N'
		   AND Z.BBS_CD = #bbsCd:VARCHAR#
		   AND Z.STATBL_ID = #statblId:VARCHAR#
		 ORDER BY Z.SEQ DESC
    </select>
    
	<!-- 통계 연결 게시판 목록 호출 -->
	<select id="statListDao.selectContentsBbsListData" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectContentsBbsListData */
		<isEqual property="paging" compareValue="0">
		SELECT A.ROW_NUM 		AS "rowNum"
			 , A.BBS_CD 		AS "bbsCd" 
			 , A.SEQ			AS "seq"
			 , A.STATBL_ID		AS "statblId"
			 , A.DEL_YN			AS "DelYn"
			 , A.TBL_LINK_TAG	AS "tblLinkTag"
			 , A.REG_DTTM		AS "regDttm"
			 , A.ROW_CNT		AS "rowCnt"
			 , A.P_SEQ			AS "pSeq"
			 , A.BBS_TIT		AS "bbsTit"
			 , A.USER_ID		AS "userId"
			 , A.USER_NM		AS "userNm"
			 , A.USER_DTTM		AS "userDttm"
			 , A.BBS_CONT		AS "bbsCont"
			 , A.VIEW_CNT		AS "viewCnt"
			 , A.STATBL_NM		AS "statblNm"
			 , A.LIST_SUB_CD    AS "listSubCd"
			 , BBS_CD, STATBL_ID, DEL_YN, TBL_LINK_TAG
			 , REG_DTTM, ROW_CNT, P_SEQ, BBS_TIT, BBS_CONT
			 , USER_ID, USER_NM, USER_DTTM, VIEW_CNT, STATBL_NM
			 , LIST_SUB_CD 
		 FROM (
		 	SELECT ROWNUM AS ROW_NUM
				 , A.BBS_CD AS BBS_CD 
				 , A.SEQ
				 , A.STATBL_ID
				 , A.DEL_YN
				 , A.TBL_LINK_TAG
				 , A.REG_DTTM
				 , A.ROW_CNT
				 , A.P_SEQ
				 , A.BBS_TIT
				 , A.USER_ID
				 , A.USER_NM
				 , A.USER_DTTM
				 , A.BBS_CONT
				 , A.VIEW_CNT
				 , A.STATBL_NM
				 , A.LIST_SUB_CD 
			 FROM ( 
		</isEqual>
				SELECT Z.BBS_CD
					 , Z.SEQ
					 , Z.STATBL_ID
					 , Z.DEL_YN
					 , Z.TBL_LINK_TAG
					 , TO_CHAR(Z.REG_DTTM,'YYYY-MM-DD HH24:MI:SS') AS REG_DTTM
					 , COUNT(*) OVER (ORDER BY Z.SEQ) AS ROW_CNT
					 , B.P_SEQ
					 , B.BBS_TIT
					 , B.USER_ID
					 , B.USER_NM
					 , B.USER_DTTM
					 , B.BBS_CONT
					 , B.VIEW_CNT
					 , C.STATBL_NM
					 , B.LIST_SUB_CD
				  FROM TB_BBS_TBL Z 
		   			INNER JOIN TB_BBS_LIST B ON Z.SEQ = B.SEQ 
	   				<isNotEmpty property="searchWord">
	   					<isEmpty property="searchType">
	            		AND ( UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') OR UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') )
	                    </isEmpty>
	                    <isNotEmpty property="searchType">
		                    <isEqual property="searchType" compareValue="bbsTit">
		                    AND UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
		                    </isEqual>
		                    <isEqual property="searchType" compareValue="bbsCont">
		                    AND UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
		                    </isEqual>
	                    </isNotEmpty>
	                </isNotEmpty>
		   			INNER JOIN TB_STTS_TBL C ON Z.STATBL_ID = C.STATBL_ID
				 WHERE B.DEL_YN = 'N' 
				   AND Z.BBS_CD = #bbsCd:VARCHAR#
				   AND Z.STATBL_ID = #statblId:VARCHAR#
				 ORDER BY SEQ DESC
        <isEqual property="paging" compareValue="0">
        <![CDATA[
				) A
			WHERE ROWNUM <= #end:NUMERIC#
			) A
		WHERE A.ROW_NUM >= #start:NUMERIC#
        ]]>
        </isEqual>
	</select>

    <!-- 검색 카운트 -->
    <select id="statListDao.selectContentsBbsListDataCount" parameterClass="params" resultClass="int">
		/* sql id : statListDao.selectContentsBbsListDataCount */
		SELECT COUNT(*)
		  FROM TB_BBS_TBL Z
   			INNER JOIN TB_BBS_LIST B ON Z.SEQ = B.SEQ 
  				<isNotEmpty property="searchWord">
  					<isEmpty property="searchType">
           		AND ( UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') OR UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '') )
                   </isEmpty>
                   <isNotEmpty property="searchType">
                    <isEqual property="searchType" compareValue="bbsTit">
                    AND UPPER(B.BBS_TIT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
                    </isEqual>
                    <isEqual property="searchType" compareValue="bbsCont">
                    AND UPPER(B.BBS_CONT) LIKE REPLACE('%' || UPPER(#searchWord:VARCHAR#) || '%', ' ', '')
                    </isEqual>
                   </isNotEmpty>
               </isNotEmpty>
   			INNER JOIN TB_STTS_TBL C ON Z.STATBL_ID = C.STATBL_ID
		 WHERE B.DEL_YN = 'N'
		   AND Z.BBS_CD = #bbsCd:VARCHAR#
		   AND Z.STATBL_ID = #statblId:VARCHAR#
    </select>
    
	<!-- 통계 연결 게시판 자료 데이터 호출(다음/이전) -->
	<select id="statListDao.selectContentsBbsNaverData" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectContentsBbsNaverData */
		SELECT * FROM ( 
			SELECT Z.BBS_CD
				 , Z.SEQ
				 , Z.STATBL_ID
				 , Z.DEL_YN
				 , Z.TBL_LINK_TAG
				 , TO_CHAR(Z.REG_DTTM,'YYYY-MM-DD HH24:MI:SS') AS REG_DTTM
				 , COUNT(*) OVER (ORDER BY Z.SEQ) AS ROW_CNT
				 , B.P_SEQ
				 , B.BBS_TIT
				 , B.USER_ID
				 , B.USER_NM
				 , B.USER_DTTM
				 , B.BBS_CONT
			  FROM TB_BBS_TBL Z
	   			INNER JOIN TB_BBS_LIST B ON Z.SEQ = B.SEQ 
			 WHERE B.DEL_YN = 'N'
			   AND Z.BBS_CD = #bbsCd:VARCHAR#
			   AND Z.STATBL_ID = #statblId:VARCHAR#
		 <isNotEmpty property="naverType">
             <isEqual property="naverType" compareValue="next">
			   <![CDATA[
			   AND Z.SEQ > #seq:NUMERIC#
			   ]]>
			 ORDER BY SEQ ASC
             </isEqual>
             <isEqual property="naverType" compareValue="prev">
			   <![CDATA[
			   AND Z.SEQ < #seq:NUMERIC#
			   ]]>
			 ORDER BY SEQ DESC
             </isEqual>
            </isNotEmpty>
		) WHERE ROWNUM = 1
	</select>

	
	<!-- 통계분석 상세 분석 -->
	<select id="statListDao.selectDtlAnalysisList" parameterClass="params" resultClass="record">
		SELECT A.STATBL_ID
		       , A.STATBL_NM
		       , B.SEQ
		       , B.TBL_LINK_TAG
          FROM TV_STTS_TBL A 
         INNER JOIN TB_BBS_TBL B
            ON A.STATBL_ID = B.STATBL_ID
         WHERE B.BBS_CD = 'STTSCT'  
           AND B.SEQ = #seq:NUMERIC#  
           AND B.DEL_YN = 'N'
           AND B.TBL_LINK_TAG = 'S'
	  	 ORDER BY REG_DTTM DESC             
	</select>
	
	<!-- 통계 연결 게시판 조회수 수정 -->
	<update id="statListDao.updateContentsBbsDataHit" parameterClass="params">
		UPDATE TB_BBS_LIST A
		   SET VIEW_CNT = VIEW_CNT + 1
		WHERE  SEQ = #seq:NUMERIC#
	</update>
	
	<!-- 통계컨텐츠 링크데이터 조회 -->
	<select id="statListDao.selectContentsLinkData" parameterClass="params" resultClass="record">
		SELECT SEQ, 
		       BBS_CD, 
		       LINK_SEQ, 
		       LINK_NM, 
		       URL, 
		       DEL_YN 
		  FROM TB_BBS_LINK 
		 WHERE BBS_CD = #bbsCd:VARCHAR#
		       AND SEQ = #seq:NUMERIC#
		       AND DEL_YN = 'N'
	</select>
	
	<!-- 통계컨텐츠 첨부파일 조회 -->
	<select id="statListDao.selectContentsFileData" parameterClass="params" resultClass="record">
		SELECT BBS_CD , 
       		   SEQ , 
		       FILE_SEQ , 
		       FILE_SIZE , 
		       VIEW_FILE_NM , 
		       SRC_FILE_NM , 
		       SAVE_FILE_NM , 
		       FILE_EXT , 
		       TOP_YN , 
		       DEL_YN , 
		       REG_DTTM 
		  FROM TB_BBS_FILE 
		 WHERE BBS_CD = #bbsCd:VARCHAR#
		       AND SEQ = #seq:NUMERIC#
		       AND DEL_YN = 'N' 
		ORDER BY TOP_YN DESC  
	</select>
	
	<!-- 통계 컨텐츠 용어설명 -->
	<select id="statListDao.selectContentsDicData" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectContentsDicData */
		SELECT T.BBS_CD , 
		       T.SEQ , 
		       T.STATBL_ID , 
		       T.DEL_YN , 
		       T.TBL_LINK_TAG , 
		       TO_CHAR(T.REG_DTTM,'YYYY-MM-DD HH24:MI:SS') AS REG_DTTM , 
		       B.P_SEQ , 
		       B.BBS_TIT , 
		       B.USER_ID , 
		       B.USER_NM , 
		       B.USER_DTTM , 
		       B.BBS_CONT 
		  FROM TB_BBS_TBL T 
		   INNER JOIN TB_BBS_LIST B 
		       ON T.SEQ = B.SEQ 
		 WHERE B.DEL_YN = 'N'
		 	   AND T.BBS_CD = #bbsCd:VARCHAR# 
		       AND T.STATBL_ID = #statblId:VARCHAR#
		ORDER BY T.SEQ ASC  
	</select>
	
	<!-- 통계표 카테고리를 검색한다(최상위, 부모, 자기자신) -->
	<select id="statListDao.selectSttsCateInfo" parameterClass="String" resultClass="record">
		/* sql id : statListDao.selectSttsCateInfo */
		SELECT TOP_CATE_ID	AS "topCateId",
		       PAR_CATE_ID	AS "parCateId",
		       CATE_ID		AS "cateId"
		FROM   TB_STTS_CATE
		WHERE  CATE_ID =
		       (SELECT CATE_ID
		       FROM    TB_STTS_TBL A
		       WHERE   A.STATBL_ID = #statblId:VARCHAR#
		       )	
	</select>
	
	<!-- 통계표 메타정보 조회 -->
	<select id="statListDao.selectSttsMeta" parameterClass="params" resultClass="record">
		/* sql id : statListDao.selectSttsMeta */
		SELECT 'S' AS OPENTY_TAG, '통계' AS OPENTY_TAG_NM,
			   O.STATBL_ID AS "statblId",
		       O.STATBL_NM AS "statblNm",
		       O.TOP_CATE_ID AS "topCateId",
		       C.CATE_NM AS "topCateNm",
		       C.SAVE_FILE_NM AS "cateSaveFileNm",
		       (SELECT NVL(AVG(APPR_VAL), 0) FROM TB_STTS_TBL_APPR  WHERE STATBL_ID = O.STATBL_ID  ) AS "apprVal",
		       'Y' AS "srcYn"
		       , (SELECT META_CONT FROM TB_STTS_STAT_META WHERE STAT_ID = O.STAT_ID AND META_ID = '81000177') AS "srcUrl"
		       , (SELECT META_CONT FROM TB_STTS_STAT_META WHERE STAT_ID = O.STAT_ID AND META_ID = '81000176') AS "srcExp",
		       O.CCL_CD AS "cclCd",  
		       O.CCL_NM AS "cclNm",  
		       FN_GET_COMM_VALUE_CD('D1008', O.CCL_CD) AS "cclFileNm",
		       O.CATE_FULLNM AS "cateFullnm",
		       O.TOP_ORG_NM AS "orgNm",
		       O.SCHW_TAG_CONT AS "schwTagCont",
		       O.STATBL_CMMT AS "statblExp",
		       O.DTACYCLE_CD AS "loadCd",
		       O.DTACYCLE_NM AS "loadNm",
		       TO_CHAR(O.LAST_DTA_DTTM, 'YYYY-MM-DD') AS "loadDttm",
		       TO_CHAR(O.OPEN_DTTM, 'YYYY-MM-DD') AS "openDttm",
		       'S' AS "srvCd",
		       O.DATA_DTTM_CONT			AS "dataDttmCont", 
	           O.STATBL_CMMT			AS "statblCmmt"
		  FROM TV_STTS_TBL O
          INNER JOIN TB_STTS_CATE C  ON O.TOP_CATE_ID = C.CATE_ID  AND C.USE_YN = 'Y'
		 WHERE O.STATBL_ID = #statblId:VARCHAR#
		   AND O.OPEN_STATE = 'Y'
		   AND O.OPEN_DTTM <![CDATA[< ]]> TRUNC(SYSDATE +1)		
	</select>
	
	
	<!-- 평가점수 등록 -->
	<insert id="statListDao.insertSttsTblAppr" parameterClass="params">
		/* sql id : statListDao.insertSttsTblAppr */
        INSERT INTO TB_STTS_TBL_APPR
                (   SEQCE_NO, 
                    STATBL_ID,
                    APPR_VAL,
                    USER_CD,
                    USER_IP,
                    REG_DTTM
                )
         VALUES (   SQ_LOG_STTS_SEQ.NEXTVAL,
                    #statblId:VARCHAR#,
                    #apprVal:NUMERIC#,
                    #userCd:NUMERIC#,
			   		#userIp:VARCHAR#,
                    SYSDATE
                )
    </insert>
    
    <!-- 평가점수 조회 -->
    <select id="statListDao.selectSttsTblAppr" parameterClass="params" resultClass="record">
    	/* sql id : statListDao.selectSttsTblAppr */
         SELECT AVG(A.APPR_VAL) AS "apprVal"
           FROM TB_STTS_TBL_APPR A
          WHERE A.STATBL_ID  = #statblId:VARCHAR#
    </select>	
	
</sqlMap>